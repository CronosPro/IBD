local relationType = nil;
local relationInfo = nil;
local notes = nil;
local entityRecord = nil;
local entityBaseCode = nil;
local classManager = nil;
local personEntities = {};
local connectedPersonEntities = {};
local addressEntities = {};
local listPosition = nil;
local isNew = true;
local listPosition = nil;

function initLogger()
	if logger == nil then
		logger = getClassManager().getClass("Logger");	
	end
end

--------autogenerated part-------
function getRelationType()
    return relationType;
end
function setRelationType(relationTypeValue)
    relationType = relationTypeValue;
end

function getRelationInfo()
    return relationInfo;
end
function setRelationInfo(relationInfoValue)
    relationInfo = relationInfoValue;
end

function getListPosition()
    return listPosition;
end
function setListPosition(listPositionValue)
    listPosition = listPositionValue;
end

function getNotes()
    return notes;
end
function setNotes(notesValue)
    notes = notesValue;
end

function getEntityRecord()
    return entityRecord;
end
function setEntityRecord(entityRecordValue)
    entityRecord = entityRecordValue;
end

function getEntityBaseCode()
    return entityBaseCode;
end
function setEntityBaseCode(entityBaseCodeValue)
    entityBaseCode = entityBaseCodeValue;
end

function getClassManager()
    return classManager;
end
function setClassManager(classManagerValue)
    classManager = classManagerValue;
end

function getIsNew()
    return isNew;
end
function setIsNew(isNewValue)
    isNew = isNewValue;
end

--------------------------------------------------
function setBeanFromLine(dataTable, configTable, mode, isCurrentEntityOnly) -- передаем таблицу с данными для загрузки и  таблицу с конфигурацией для загрузки
	initLogger();
	local messages = {};	
	local configValues = "";
	local tConfigValues = "";
	local terminPosition = 0;
	local fieldNumber = 0;
	local extractedTermin = "";	
	local isConnectedEntityNew = true;
	local passedEntitiesCodes = {}
	for index, tConfigValues in ipairs(configTable) do		
		local localVocKey = nil;				
		logger.writeDebugMessage( getClassManager(),"Получена конфигурациz: "..render(tConfigValues));
		logger.writeDebugMessage( getClassManager(),"Получение номера аттрибута базы данных");
		fieldNumber = tonumber(tConfigValues[3]);	
		logger.writeDebugMessage(getClassManager(),"Получение позиции в строке загрузки");		
		if (string.sub(tConfigValues[1],1,1) ~= "@") then
			terminPosition = tonumber(tConfigValues[1]);					
			logger.writeDebugMessage( getClassManager(),"Получение термина строки по позиции № "..terminPosition);
			extractedTermin = dataTable[terminPosition];
		else
			extractedTermin = string.sub(tConfigValues[1],2);
			localVocKey = tonumber(extractedTermin)
		end		
		logger.writeDebugMessage( getClassManager(), "Был получен термин для загрузки в поле "..fieldNumber);
		if (extractedTermin ~= nil and string.len(extractedTermin)>0) then			
			if (tConfigValues[2] == getEntityBaseCode()) then
				if(fieldNumber == 5) then
					setRelationInfo(extractedTermin);
				elseif(fieldNumber == 8) then
					setNotes(extractedTermin);			
				else
					local vocCode = getClassManager().getClass("FieldsWorker").getVocFieldBaseCode(getClassManager(),getEntityBaseCode(),fieldNumber)			
					if (vocCode ~= nil) then						
						if (localVocKey == nil) then
							localVocKey, errorMessages = getClassManager().getClass("DBWorker").convertExternalVocTermin(getClassManager(), extractedTermin, vocCode);				
							for _,message in pairs(errorMessages) do
								table.insert(messages, message)
							end
						end	
						if(fieldNumber == 1) then
							--категория 	
							setRelationType(localVocKey);				
						end	
					else
						logger.writeDebugMessage( getClassManager(), "Поле № "..fieldNumber.. " не обрабатывает программным объектом");
					end
				end	
			else					
				isConnectedEntityNew = table.count(getClassManager().getClass("Service").getIndexesFromTable(passedEntitiesCodes, tConfigValues[2]))==0
				if (not isCurrentEntityOnly) then
					logger.writeDebugMessage( getClassManager(),"Термин принадлежит базе данных с мнемокодом "..tConfigValues[2]);			
					logger.writeDebugMessage( getClassManager(),"Создание нового программного объекта")
					local connectedEntity = getClassManager().newEntity(getClassManager(), tConfigValues[2], true, isConnectedEntityNew)			
					if (isConnectedEntityNew) then
						logger.writeDebugMessage( getClassManager(),"Добавление созданного объекта для установления связи")				
						addConnectedEntity (connectedEntity);			
					end
					isConnectedEntityNew = false;				
					logger.writeDebugMessage( getClassManager(),"Заполнение программного объекта на основе данных из файла загрузки и запись полученных сообщений");																								
					local errorMessages = connectedEntity.setBeanFromLine(dataTable, {tConfigValues}, mode); 						
					for _,message in pairs(errorMessages) do
						table.insert(messages, message)
					end	
					logger.writeDebugMessage(getClassManager(),"Проверка режима работы системы: "..mode);	
					if (mode == getClassManager().getClass("Constanta").getCnstDataLoaderLoadMode()) then
						logger.writeDebugMessage(getClassManager(),"Сохранение программного объекта в базу данных с мнемокодом "..tConfigValues[2]);																													
						connectedEntity.saveBeanToDb();						
					end
				end
			end
			table.insert(passedEntitiesCodes,tConfigValues[2]);
		end
	end	
	return messages;
end

function addConnectedEntity (connectedEntity)
	local connectedEntityCode = connectedEntity.getEntityBaseCode();
	if (connectedEntityCode == getClassManager().getClass("Constanta").getCnstPerson()) then
		if (table.count(getPersonEntities()) == 0) then		
			addBranchEntity(connectedEntity);	
		else
			addConnectedPersonEntity(connectedEntity)
		end
	elseif (connectedEntityCode == getClassManager().getClass("Constanta").getCnstAddress()) then
		addAddressEntity(connectedEntity);		
	end		
end

function getAttributeByFieldNumber(fieldNumber)
	local attribute = nil;
	local noAttributeLineDefined = false;
	fieldNumber = tonumber(fieldNumber)	
	if(fieldNumber == 1) then
		attribute = getRelationType();
	elseif(fieldNumber == 5) then
		attribute = getRelationInfo();
	elseif(fieldNumber == 8) then
		attribute = getNotes();	
	else
		noAttributeLineDefined = true;
	end		
	--необходимо для логики выдачи сообщения про неопределенный номер поля в данном методе
	if (noAttributeLineDefined == false and attribute == nil) then
		attribute = "";		
	end	
	return attribute;
end
--------------------------------------------------
function clearEntities()
	setPersonEntities({})
	setAddressEntities({})
	setConnectedPersonEntities({})
end

function getRelationTypeDefinition()	
	local defIndexes = getClassManager().getClass("Service").getIndexesFromTable(
						getClassManager().getClass("Constanta").getDpdPersonRelationTypeCodes(),getRelationType());							
	return getClassManager().getClass("Service").getItemFromTableByIndex(getClassManager().getClass("Constanta").getDpdPersonRelationTypeDefinitions(),
																		getClassManager().getClass("Service").getItemFromTableByIndex(defIndexes,1));
end

function addAddressEntity(newAddressEntity)
	table.insert(addressEntities, newAddressEntity)
end
function setAddressEntities(newAddressEntities)
	addressEntities = newAddressEntities
end
function getAddressEntities()
	return addressEntities
end

function addPersonEntity(newPersonEntity)
	table.insert(personEntities, newPersonEntity)
end
function setPersonEntities(newPersonEntities)
	personEntities = newPersonEntities
end
function getPersonEntities()
	return personEntities
end

function getConnectedPersonEntities()
    return connectedPersonEntities;
end
function addConnectedPersonEntity(newConnectedPersonEntity)
    table.insert(connectedPersonEntities,newConnectedPersonEntity);
end
function setConnectedPersonEntities(newConnectedPersonEntities)
    connectedPersonEntities = newConnectedPersonEntities;
end

function getListPosition()
    return listPosition;
end
function setListPosition(listPositionValue)
    listPosition = listPositionValue;
end

function setLinks()			
	local addressBase = CroApp.GetBank():GetBase(getClassManager().getClass("Constanta").getCnstAddress());							
	local personRelationsBase = CroApp.GetBank():GetBase(getClassManager().getClass("Constanta").getCnstPersonRelations());															
	local personBase = CroApp.GetBank():GetBase(getClassManager().getClass("Constanta").getCnstPerson());			
	--addresses linking			
	for key, addressEntity in pairs(getAddressEntities()) do								
		if (addressEntity.getEntityRecord() ~= nil) then											
			if (getClassManager().getClass("DBWorker").isRecordLocked(getClassManager(), getEntityRecord())) then
				getEntityRecord():Unlock();
			end						
			if (getClassManager().getClass("DBWorker").isRecordLocked(getClassManager(), addressEntity.getEntityRecord())) then
				addressEntity.getEntityRecord():Unlock();
			end						
			personRelationsBase:AddLink(getEntityRecord().SN,6,addressBase,addressEntity.getEntityRecord().SN, Base.LockWait, Base.LockWait);											
		end
	end
	--persons linking			
	for key, personEntity in pairs(getPersonEntities()) do				
		if (personEntity.getEntityRecord() ~= nil) then					
			if (getClassManager().getClass("DBWorker").isRecordLocked(getClassManager(), getEntityRecord())) then
				getEntityRecord():Unlock();
			end					
			if (getClassManager().getClass("DBWorker").isRecordLocked(getClassManager(), personEntity.getEntityRecord())) then
				personEntity.getEntityRecord():Unlock();
			end				
			personRelationsBase:AddLink(getEntityRecord().SN,2,personBase,personEntity.getEntityRecord().SN, Base.LockWait, Base.LockWait);																									
		end
	end		
	setEntityRecord(personRelationsBase:GetRecord(getEntityRecord().SN));		
end


function setBeanFromRecord(personRelationsRecord)	
	local personRelationsBaseCode = getEntityBaseCode();
	if personRelationsRecord.Base.Code == personRelationsBaseCode then		
		setEntityRecord(personRelationsRecord)
		setRelationType(getClassManager().getClass("FieldsWorker").getField(personRelationsBaseCode, personRelationsRecord , 1 , "" , "", ""));
		setRelationInfo(getClassManager().getClass("FieldsWorker").getField(personRelationsBaseCode, personRelationsRecord , 5 , "" , "", ""));		
		setNotes(		getClassManager().getClass("FieldsWorker").getField(personRelationsBaseCode, personRelationsRecord , 8 , "" , "", ""));				
	end
end

function setBeanFromView(view)			
	setRelationType(view.getDpdRelationTypeSelectedCode())	
	setRelationInfo(view.getTxtRelationInfoText());				
	setNotes(view.getTxtNotesText());	
end

function saveBeanToDb()
	local saveResult = true;		
	local personRelationsBaseCode = getEntityBaseCode();			
	if (getEntityRecord() == nil) then				
		setEntityRecord(CroApp.GetBank():GetBase(personRelationsBaseCode):AddRecord())							
	end	
	local personRelationsRecord = getEntityRecord();	
	if personRelationsRecord.Base.Code == personRelationsBaseCode then								
		getClassManager().getClass("FieldsWorker").setField(personRelationsBaseCode, personRelationsRecord, 1 , "", getRelationType(), nil, nil, true);										
		getClassManager().getClass("FieldsWorker").setField(personRelationsBaseCode, personRelationsRecord, 5 , "", getRelationInfo(), nil, nil, true);										
		getClassManager().getClass("FieldsWorker").setField(personRelationsBaseCode, personRelationsRecord, 8 , "", getNotes(), nil, nil, false);											
		setLinks();							
	else
		saveResult = false;
	end	
	return saveResult;
end

function toShortString(isWithConnected, isCheckApplicant)
	local result = {};						
	if (isCheckApplicant) then
		if (getIsNew()) then
			table.insert(result, "Новая. связь")
		else
			table.insert(result, "Существующая связь")
		end
	end
	table.insert(result, getRelationTypeDefinition());			
	if (isWithConnected) then				
		if (table.count(getPersonEntities()) > 2) then
			table.insert(result, "Количество лиц в связи: "..table.count(getPersonEntities()))	
		else
			for key, personEntity in pairs(getPersonEntities()) do 		
				if (personEntity.getEntityRecord() ~= nil) then
					personEntity.setBeanFromRecord(personEntity.getEntityRecord())
				end
				table.insert(result, personEntity.toShortString(false))	
			end		
		end
		for key, addressEntity in pairs(getAddressEntities()) do 		
			if (addressEntity.getEntityRecord() ~= nil) then
				addressEntity.setBeanFromRecord(addressEntity.getEntityRecord())
			end
			table.insert(result, addressEntity.toShortString(false))	
		end	
	end	
	return table.concat(result," | ")
end

function clearEntity()
	clearEntities()
	setEntityRecord(nil)
	setRelationType(nil)
	setRelationInfo(nil)
	setNotes(nil)
end