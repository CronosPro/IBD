------------------ autogenerated part--------------
local lastName = nil;
local firstName = nil;
local middleName = nil;
local birthday = nil;
local gender = nil;
local maritalStatus = nil;
local citizenship = nil;
local sortOfPerson = {};
local additionalInfo = {};
local entityRecord = nil;
local entityBaseCode = nil;
local photoPicture = nil
local jobTrackEntities = {};
local foundersAndPartnersEntities = {};
local personRelationsEntities = {};
local actionJournalEntities = {};
local addressTypeEntities = {};
local educationEntities = {};
local personalIDEntities = {};
local documentEntities = {};
local loanEntities = {};
local breachesEntities = {};
local bankAccountEntities = {};
local connectionTypeEntities = {};
local isExisted = false;
local classManager = nil;
local fieldsSubstitutionTable = {};
local logger = nil;
local sidPersonKomplat = nil;
local sidBankClient = {};

local fullName = nil;


function initLogger()
	if logger == nil then
		logger = getClassManager().getClass("Logger");	
	end
end
function getClassManager()
    return classManager;
end
function setClassManager(classManagerValue)
    classManager = classManagerValue;
end

function getEntityBaseCode()
    return entityBaseCode;
end
function setEntityBaseCode(entityBaseCodeValue)
    entityBaseCode = entityBaseCodeValue;
end

function getIsExisted()
    return isExisted;
end
function setIsExisted(isExistedValue)
    isExisted = isExistedValue;
end

function getJobTrackEntities()
    return jobTrackEntities;
end
function addJobTrackEntity(newJobTrackEntity)
    table.insert(jobTrackEntities,newJobTrackEntity);
end
function setJobTrackEntities(newJobTrackEntities)
    jobTrackEntities = newJobTrackEntities;
end

function getFoundersAndPartnersEntities()
    return foundersAndPartnersEntities;
end
function addFoundersAndPartnersEntity(newFoundersAndPartnersEntity)
    table.insert(foundersAndPartnersEntities,newFoundersAndPartnersEntity);
end
function setFoundersAndPartnersEntities(newFoundersAndPartnersEntities)
    foundersAndPartnersEntities = newFoundersAndPartnersEntities;
end

function getPersonRelationsEntities()
    return personRelationsEntities;
end
function addPersonRelationsEntity(newPersonRelationsEntity)
    table.insert(personRelationsEntities,newPersonRelationsEntity);
end
function setPersonRelationsEntities(newPersonRelationsEntities)
    personRelationsEntities = newPersonRelationsEntities;
end

function getActionJournalEntities()
    return actionJournalEntities;
end
function addActionJournalEntity(newActionJournalEntity)
    table.insert(actionJournalEntities,newActionJournalEntity);
end
function setActionJournalEntities(newActionJournalEntities)
    actionJournalEntities = newActionJournalEntities;
end

function getAddressTypeEntities()
    return addressTypeEntities;
end
function addAddressTypeEntity(newAddressTypeEntity)
    table.insert(addressTypeEntities,newAddressTypeEntity);
end
function setAddressTypeEntities(newAddressTypeEntities)
    addressTypeEntities = newAddressTypeEntities;
end

function getEducationEntities()
    return educationEntities;
end
function addEducationEntity(newEducationEntity)
    table.insert(educationEntities,newEducationEntity);
end
function setEducationEntities(newEducationEntities)
    educationEntities = newEducationEntities;
end

function getPersonalIDEntities()
    return personalIDEntities;
end
function addPersonalIDEntity(newPersonalIDEntity)
    table.insert(personalIDEntities,newPersonalIDEntity);
end
function setPersonalIDEntities(newPersonalIDEntities)
    personalIDEntities = newPersonalIDEntities;
end

function getDocumentEntities()
    return documentEntities;
end
function addDocumentEntity(newDocumentEntity)
    table.insert(documentEntities,newDocumentEntity);
end
function setDocumentEntities(newDocumentEntities)
    documentEntities = newDocumentEntities;
end

function getLoanEntities()
    return loanEntities;
end
function addLoanEntity(newLoanEntity)
    table.insert(loanEntities,newLoanEntity);
end
function setLoanEntities(newLoanEntities)
    loanEntities = newLoanEntities;
end


function getBreachesEntities()
    return breachesEntities;
end
function addBreachesEntity(newBreachesEntity)
    table.insert(breachesEntities,newBreachesEntity);
end
function setBreachesEntities(newBreachesEntities)
    breachesEntities = newBreachesEntities;
end

function getBankAccountEntities()
    return bankAccountEntities;
end
function addBankAccountEntity(newBankAccountEntity)
    table.insert(bankAccountEntities,newBankAccountEntity);
end
function setBankAccountEntities(newBankAccountEntities)
    bankAccountEntities = newBankAccountEntities;
end

function getConnectionTypeEntities()
    return connectionTypeEntities;
end
function addConnectionTypeEntity(newConnectionTypeEntity)
    table.insert(connectionTypeEntities,newConnectionTypeEntity);
end
function setConnectionTypeEntities(newConnectionTypeEntities)
    connectionTypeEntities = newConnectionTypeEntities;
end

function getEntityRecord()
    return entityRecord;
end
function setEntityRecord(entityRecordValue)
    entityRecord = entityRecordValue;
end
function refreshEntityRecord()
	if (getEntityRecord().Base:GetRecord(getEntityRecord().SN) ~= nil) then
		setEntityRecord(getEntityRecord().Base:GetRecord(getEntityRecord().SN));		
	end
end

function getFieldsSubstitutionTable()
    return fieldsSubstitutionTable;
end
function addFieldsSubstitutionTable(newFieldsSubstitutionTable)
    table.insert(fieldsSubstitutionTable,newFieldsSubstitutionTable);
end
function setFieldsSubstitutionTable(newFieldsSubstitutionTable)
    fieldsSubstitutionTable = newFieldsSubstitutionTable;
end

function getSidPersonKomplat()
    return sidPersonKomplat;
end
function setSidPersonKomplat(sidPersonKomplatValue)
    sidPersonKomplat = sidPersonKomplatValue;
end

function getSidBankClient()
    return sidBankClient;
end
function setSidBankClient(sidBankClientValue)  
	sidBankClient = table.iunion(sidBankClientValue, {})
end
function addSidBankClient(sidBankClientValue)  
	table.insert(sidBankClient,sidBankClientValue);
end

--------finish autogenerated part--------------
function clearEntities()
	setJobTrackEntities({})
	setActionJournalEntities({})
	setPersonRelationsEntities({})
	setConnectionTypeEntities({})
	setFoundersAndPartnersEntities({})
	setAddressTypeEntities({})
	setEducationEntities({})
	setPersonalIDEntities({})
	setDocumentEntities({})
	setLoanEntities({})
	
	setBreachesEntities({})
	setBankAccountEntities({})
	
end
-------------------------------------------------
function setBeanFromLine(dataTable, configTable, mode, isCurrentEntityOnly) -- передаем таблицу с данными для загрузки и  таблицу с конфигурацией для загрузки	
	initLogger();
	local messages = {};	
	local configValues = "";
	local tConfigValues = "";
	local terminPosition = 0;
	local fieldNumber = 0;
	local extractedTermin = "";	
	local isConnectedEntityNew = true;
	local passedEntitiesCodes = {}	
	for index, tConfigValues in pairs(configTable) do		
		local localVocKey = nil;				
		logger.writeDebugMessage( getClassManager(),"Получена конфигурация: "..render(tConfigValues));
		logger.writeDebugMessage( getClassManager(),"Получение номера аттрибута базы данных");
		fieldNumber = tonumber(tConfigValues[3]);	
		logger.writeDebugMessage(getClassManager(),"Получение позиции в строке загрузки");		
		if (string.sub(tConfigValues[1],1,1) ~= "@") then
			terminPosition = tonumber(tConfigValues[1]);					
			logger.writeDebugMessage( getClassManager(),"Получение термина строки по позиции № "..terminPosition);
			extractedTermin = dataTable[terminPosition];
		else
			extractedTermin = string.sub(tConfigValues[1],2);
			localVocKey = tonumber(extractedTermin)
		end		
		logger.writeDebugMessage( getClassManager(), "Был получен термин '"..render(extractedTermin).."' для загрузки в поле "..fieldNumber);
		if (extractedTermin ~= nil and string.len(extractedTermin)>0) then			
			if (tConfigValues[2] == getEntityBaseCode()) then			
				if (fieldNumber == 1) then									
					setLastName(extractedTermin);
				elseif (fieldNumber == 56) then									
					setFullName(extractedTermin);					
				elseif (fieldNumber == 2) then									
					setBirthday(extractedTermin);	
				elseif(fieldNumber == 17) then
					setFirstName(extractedTermin)
				elseif(fieldNumber == 18) then
					setMiddleName(extractedTermin)			
				elseif(fieldNumber == 47) then				
					addAdditionalInfo(extractedTermin)		
				elseif(fieldNumber == 58) then				
					setSidPersonKomplat(extractedTermin)		
				elseif(fieldNumber == 57) then	
					addSidBankClient(extractedTermin)									
				else
					local vocCode = getClassManager().getClass("FieldsWorker").getVocFieldBaseCode(getClassManager(),getEntityBaseCode(),fieldNumber)			
					if (vocCode ~= nil) then						
						if (localVocKey == nil) then
							localVocKey, errorMessages = getClassManager().getClass("DBWorker").convertExternalVocTermin(getClassManager(), extractedTermin, vocCode);				
							for _,message in pairs(errorMessages) do
								table.insert(messages, message)
							end
						end	
						if(fieldNumber == 40) then
							--пол
							setGender(localVocKey);
						elseif(fieldNumber == 42) then
							--семейный статус		
							setMaritalStatus(localVocKey);						
						elseif(fieldNumber == 49) then
							--гражданство
							setCitizenship(localVocKey);		
						elseif(fieldNumber == 44) then
							--категория
							addSortOfPerson(localVocKey);
						end								
					else
						logger.writeDebugMessage( getClassManager(), "Поле № "..fieldNumber.. " не обрабатывает программным объектом");
					end
				end	
			else					
				isConnectedEntityNew = table.count(getClassManager().getClass("Service").getIndexesFromTable(passedEntitiesCodes, tConfigValues[2]))==0
				if (not isCurrentEntityOnly) then
					logger.writeDebugMessage( getClassManager(),"Термин принадлежит базе данных с мнемокодом "..tConfigValues[2]);			
					logger.writeDebugMessage( getClassManager(),"Создание нового программного объекта")
					local connectedEntity = getClassManager().newEntity(getClassManager(), tConfigValues[2], true, isConnectedEntityNew)			
					if (isConnectedEntityNew) then
						logger.writeDebugMessage( getClassManager(),"Добавление созданного объекта для установления связи")				
						addConnectedEntity (connectedEntity);			
					end
					isConnectedEntityNew = false;				
					logger.writeDebugMessage( getClassManager(),"Заполнение программного объекта на основе данных из файла загрузки и запись полученных сообщений");																								
					local errorMessages = connectedEntity.setBeanFromLine(dataTable, {tConfigValues}, mode); 						
					for _,message in pairs(errorMessages) do
						table.insert(messages, message)
					end	
					logger.writeDebugMessage(getClassManager(),"Проверка режима работы системы: "..mode);	
					if (mode == getClassManager().getClass("Constanta").getCnstDataLoaderLoadMode()) then
						logger.writeDebugMessage(getClassManager(),"Сохранение программного объекта в базу данных с мнемокодом "..tConfigValues[2]);																													
						connectedEntity.saveBeanToDb();						
					end
				end
			end
			table.insert(passedEntitiesCodes,tConfigValues[2]);
		end
	end	
	return messages;
end

function addConnectedEntity (connectedEntity)
	local connectedEntityCode = connectedEntity.getEntityBaseCode();
	if (connectedEntityCode == getClassManager().getClass("Constanta").getCnstPersonRelations()) then
		addPersonRelationsEntity(connectedEntity);	
	elseif (connectedEntityCode == getClassManager().getClass("Constanta").getCnstFoundersAndPartners()) then
		addFoundersAndPartnersEntity(connectedEntity);	
	elseif (connectedEntityCode == getClassManager().getClass("Constanta").getCnstAddressType()) then
		addAddressTypeEntity(connectedEntity);	
	elseif (connectedEntityCode == getClassManager().getClass("Constanta").getCnstAddress()) then		
		for index, addressTypeEntity in pairs(getAddressTypeEntities()) do
			addressTypeEntity.addConnectedEntity(connectedEntity);	
			connectedEntity.addAddressTypeEntity(addressTypeEntity)
		end	
	elseif (connectedEntityCode == getClassManager().getClass("Constanta").getCnstDocument()) then
		addDocumentEntity(connectedEntity);
	elseif (connectedEntityCode == getClassManager().getClass("Constanta").getCnstLoan()) then
		addLoanEntity(connectedEntity);
	elseif (connectedEntityCode == getClassManager().getClass("Constanta").getCnstBankAccount()) then
		addBankAccountEntity(connectedEntity);	
	elseif (connectedEntityCode == getClassManager().getClass("Constanta").getCnstConnectionType()) then
		addConnectionTypeEntity(connectedEntity);
	elseif (connectedEntityCode == getClassManager().getClass("Constanta").getCnstConnection()) then
		for index, connectionTypeEntity in pairs(getConnectionTypeEntities()) do
			connectionTypeEntity.addConnectedEntity(connectedEntity);
			connectedEntity.addConnectionTypyEntity(connectionTypeEntity)
		end
	elseif (connectedEntityCode == getClassManager().getClass("Constanta").getCnstEducation()) then
		addEducationEntity(connectedEntity);	
	elseif (connectedEntityCode == getClassManager().getClass("Constanta").getCnstJobTrack()) then
		addJobTrackEntity(connectedEntity);	
	elseif (connectedEntityCode == getClassManager().getClass("Constanta").getCnstPersonalID()) then
		addPersonalIDEntity(connectedEntity);	
	elseif (connectedEntityCode == getClassManager().getClass("Constanta").getCnstBreaches()) then
		addBreachesEntity(connectedEntity);	
	end	
end

function getAttributeByFieldNumber(fieldNumber)
	local attribute = ""	
	local noAttributeLineDefined = false;
	fieldNumber = tonumber(fieldNumber)
	if (fieldNumber == 1) then									
		attribute = getLastName();
	elseif (fieldNumber == 56) then									
		attribute = getFullName();		
	elseif (fieldNumber == 2) then									
		attribute = getBirthday();	
	elseif(fieldNumber == 17) then
		attribute = getFirstName()
	elseif(fieldNumber == 18) then
		attribute = getMiddleName()			
	elseif(fieldNumber == 47) then
		--Доп. инф.
		attribute = getAdditionalInfo()	
	elseif(fieldNumber == 40) then
		--пол
		attribute = getGender();
	elseif(fieldNumber == 42) then
		--семейный статус		
		attribute = getMaritalStatus();
	elseif(fieldNumber == 44) then
		--категория лица
		attribute = getSortOfPerson();
	elseif(fieldNumber == 49) then
		--гражданство
		attribute = getCitizenship();	
	elseif(fieldNumber == 58) then	
		attribute = getSidPersonKomplat();	
	elseif(fieldNumber == 57) then
		attribute = getSidBankClient();	
	else
		noAttributeLineDefined = true;
	end
	--необходимо для логики выдачи сообщения про неопределенный номер поля в данном методе
	if (noAttributeLineDefined == false and attribute == nil) then
		attribute = "";		
	end		
	return attribute;
end
-------------------------------------------------------
function setLinks()								
	setPersonLinks(getJobTrackEntities(), 25);				
	setPersonLinks(getActionJournalEntities(), 46);			
	setPersonLinks(getPersonRelationsEntities(), 37);
	setPersonLinks(getConnectionTypeEntities(), 29);
	setPersonLinks(getFoundersAndPartnersEntities(), 25);	
	setPersonLinks(getAddressTypeEntities(), 28);	
	setPersonLinks(getEducationEntities(), 50);	
	setPersonLinks(getPersonalIDEntities(), 27);	
	setPersonLinks(getDocumentEntities(), 31);	
	setPersonLinks(getLoanEntities(), 59);	
	setPersonLinks(getBreachesEntities(), 43);		
	setPersonLinks(getBankAccountEntities(), 34);		
	setEntityRecord(getEntityRecord().Base:GetRecord(getEntityRecord().SN));		
end

function setPersonLinks(entities, linkingField)		
	for key, entity in pairs(entities) do			
		if (entity.getEntityRecord() ~= nil) then																
			getClassManager().getClass("DBWorker").processRecordLink(getClassManager(), getClassManager().getClass("Constanta").getCnstAddLink(), getEntityRecord(), linkingField, entity.getEntityRecord())						
			refreshEntityRecord()			
		end
	end	
end

function deleteLinkJobTrack(jobTrackEntity)		
	getClassManager().getClass("DBWorker").processRecordLink(getClassManager(), getClassManager().getClass("Constanta").getCnstDeleteLink(), getEntityRecord(), 25, jobTrackEntity.getEntityRecord())	
	refreshEntityRecord()
end	

function deleteLinkFoundersAndPartners(founderAndPartnerEntity)
	getClassManager().getClass("DBWorker").processRecordLink(getClassManager(), getClassManager().getClass("Constanta").getCnstDeleteLink(), getEntityRecord(), 25, founderAndPartnerEntity.getEntityRecord())
	refreshEntityRecord()
end

function deleteLinkPersonRelations(personRelationsEntity)	
	getClassManager().getClass("DBWorker").processRecordLink(getClassManager(), getClassManager().getClass("Constanta").getCnstDeleteLink(), getEntityRecord(), 37, personRelationsEntity.getEntityRecord())
	refreshEntityRecord();
end

function deleteLinkDocument(documentEntity)
	getClassManager().getClass("DBWorker").processRecordLink(getClassManager(), getClassManager().getClass("Constanta").getCnstDeleteLink(), getEntityRecord(), 31, documentEntity.getEntityRecord())
	refreshEntityRecord();
end


function deleteLinkLoan(loanEntity)
	getClassManager().getClass("DBWorker").processRecordLink(getClassManager(), getClassManager().getClass("Constanta").getCnstDeleteLink(), getEntityRecord(), 59, loanEntity.getEntityRecord())
	refreshEntityRecord();
end


-----------------------------
function setBeanFromRecord(personRecord)	
	local personBaseCode = getEntityBaseCode();
	if personRecord.Base.Code == personBaseCode then			
		setEntityRecord(personRecord)
		setLastName(			getClassManager().getClass("FieldsWorker").getField(personBaseCode, personRecord , 1 , "" , "", ""));
		setFullName(			getClassManager().getClass("FieldsWorker").getField(personBaseCode, personRecord , 56 , "" , "", ""));
		setFirstName(			getClassManager().getClass("FieldsWorker").getField(personBaseCode, personRecord , 17, "" , "", ""));
		setMiddleName(			getClassManager().getClass("FieldsWorker").getField(personBaseCode, personRecord , 18, "" , "", ""));
		setBirthday(			getClassManager().getClass("FieldsWorker").getField(personBaseCode, personRecord , 2 , "" , "", ""));
		setGender(				getClassManager().getClass("FieldsWorker").getField(personBaseCode, personRecord , 40, "" , "", ""));		
		setMaritalStatus(		getClassManager().getClass("FieldsWorker").getField(personBaseCode, personRecord , 42, "" , "", ""));
		setSortOfPerson(		getClassManager().getClass("FieldsWorker").getField(personBaseCode, personRecord , 44, 0 , "", ""));
		setCitizenship(			getClassManager().getClass("FieldsWorker").getField(personBaseCode, personRecord , 49, "" , "", ""));
		setAdditionalInfo(		getClassManager().getClass("FieldsWorker").getField(personBaseCode, personRecord , 47, 0 , "", ""));
		setSidPersonKomplat(	getClassManager().getClass("FieldsWorker").getField(personBaseCode, personRecord , 58, "" , "", ""));
		setSidBankClient(		getClassManager().getClass("FieldsWorker").getField(personBaseCode, personRecord , 57, 0 , "", ""));
	end
end

function setEntityFromCopy (entityCopy)
	setLastName(entityCopy.getLastName());			
	setFirstName(entityCopy.getFirstName());	
	setMiddleName(entityCopy.getMiddleName());			
	setBirthday(entityCopy.getBirthday());	
	setGender(entityCopy.getGender());				
	setMaritalStatus(entityCopy.getMaritalStatus());	
	setSortOfPerson(entityCopy.getSortOfPerson());			
	setCitizenship(entityCopy.getCitizenship());			
	setAdditionalInfo(entityCopy.getAdditionalInfo());		
end

function updateEntity()
	setBeanFromRecord(getClassManager(), getEntityRecord())	
end

function setBeanFromView(view)
	setLastName(view.getTxtLastNameText());			
	setFirstName(view.getTxtFirstNameText());	
	setMiddleName(view.getTxtMiddleNameText());			
	setBirthday(view.getTxtBirthdayText());									   
	setGender(view.getDpdGenderSelectedCode());				
	setMaritalStatus(view.getDpdMaritalStatusSelectedCode());	
	setSortOfPerson(view.getDpdSortOfPersonSelectedCode());		
	setCitizenship(view.getDpdCitizenshipSelectedCode());			
	setAdditionalInfo(view.getTxtAdditionalInfoText());				
	if (getPhotoPicture() ~= nil)then				
		view.getPctPhoto():SaveToFile(getPhotoPicture(), 1, false)				
	end	
end

function saveBeanToDb(fieldsSubstitutionTable)	
	local saveResult = true;		
	local personBaseCode = getEntityBaseCode();
	local personBase = CroApp.GetBank():GetBase(personBaseCode);
	if (getEntityRecord() == nil) then		
		setEntityRecord(personBase:AddRecord())					
	else
		setEntityRecord(personBase:GetRecord(getEntityRecord().SN));
	end
	setFieldsSubstitutionTable(fieldsSubstitutionTable)
	local personRecord = getEntityRecord();
	if personRecord.Base.Code == personBaseCode then				
		getClassManager().getClass("FieldsWorker").setField(personBaseCode, personRecord, 1, "", getLastName(), nil, nil, true);	
		getClassManager().getClass("FieldsWorker").setField(personBaseCode, personRecord, 56, "", getFullName(), nil, nil, true);						
		getClassManager().getClass("FieldsWorker").setField(personBaseCode, personRecord, 17,"", getFirstName(), nil, nil, true);
		getClassManager().getClass("FieldsWorker").setField(personBaseCode, personRecord, 18,"", getMiddleName(), nil, nil, true);
		getClassManager().getClass("FieldsWorker").setField(personBaseCode, personRecord, 2, "", getBirthday(), nil, nil, true);		
		getClassManager().getClass("FieldsWorker").setField(personBaseCode, personRecord, 40,"", getGender(), nil, nil, true);		
		getClassManager().getClass("FieldsWorker").setField(personBaseCode, personRecord, 42,"", getMaritalStatus(), nil, nil, true);
		getClassManager().getClass("FieldsWorker").setField(personBaseCode, personRecord, 44,"", getSortOfPerson(), nil, nil, true);				
		getClassManager().getClass("FieldsWorker").setField(personBaseCode, personRecord, 47,"", getAdditionalInfo(), nil, nil, true);
		if (getPhotoPicture() ~= nil) then						
			if (string.len(getPhotoPicture()) > 0 ) then										
				getClassManager().getClass("FieldsWorker").setField(personBaseCode, personRecord, 26,"", nil, "@"..getPhotoPicture(), nil, true);											
				os.remove(getPhotoPicture())												
			else
				personRecord:DeleteFieldValue(26)
			end
		end		
		getClassManager().getClass("FieldsWorker").setField(personBaseCode, personRecord, 58,"", getSidPersonKomplat(), nil, nil, true);
		getClassManager().getClass("FieldsWorker").setField(personBaseCode, personRecord, 57,"", getSidBankClient(), nil, nil, true);		
		getClassManager().getClass("FieldsWorker").setField(personBaseCode, personRecord, 49,"", getCitizenship(), nil, nil, false);								
		setLinks()												
	else
		saveResult = false;
	end
	return saveResult;
end

function sbstFld(fieldNumber)
	return getClassManager().getClass("Service").substituteField(getClassManager(), getFieldsSubstitutionTable(), fieldNumber)
end

function getLastName()
    return lastName;
end
function setLastName(lastNameValue)
    lastName = lastNameValue;
end

function getFullName()
    return fullName;
end
function setFullName(fullNameValue)
    fullName = fullNameValue;
end

function getFirstName()
    return firstName;
end
function setFirstName(firstNameValue)
    firstName = firstNameValue;
end

function getMiddleName()
    return middleName;
end
function setMiddleName(middleNameValue)
    middleName = middleNameValue;
end

function getBirthday()
    return birthday;
end
function setBirthday(birthdayValue)
    birthday = birthdayValue;
end

function getGender()
    return gender;
end
function setGender(genderValue)
    gender = genderValue;
end

function getMaritalStatus()
    return maritalStatus;
end
function setMaritalStatus(maritalStatusValue)
    maritalStatus = maritalStatusValue;
end

function getSortOfPerson()
    return sortOfPerson;
end
function setSortOfPerson(sortOfPersonValue)
    sortOfPerson = table.iunion(sortOfPersonValue, {})
end

function getCitizenship()
    return citizenship;
end
function setCitizenship(citizenshipValue)
    citizenship = citizenshipValue;
end

function getAdditionalInfo()
    return additionalInfo;
end
function addAdditionalInfo(additionalInfoValue)
    table.insert(additionalInfo,additionalInfoValue);
end

function addSortOfPerson(sortOfPersonValue)
    table.insert(sortOfPerson,sortOfPersonValue);
end

function setAdditionalInfo(additionalInfoValue)
    additionalInfo = table.iunion(additionalInfoValue, {})
end

function getPhotoPicture()
    return photoPicture;
end
function setPhotoPicture(photoPictureValue)
    photoPicture = photoPictureValue;
end

function toShortString(isWithConnectedEntities)
	local result = {};	
	if (isWithConnectedEntities) then
		for key, getJobTrackEntity in pairs(getJobTrackEntities()) do
			table.insert(result, getJobTrackEntity.getPosition())
			table.insert(result, getJobTrackEntity.getStartDate().." - "..getJobTrackEntity.getEndDate())
		end
	end
	table.insert(result, getLastName())
	table.insert(result, getFirstName())
	table.insert(result, getMiddleName())
	table.insert(result, getBirthday())	
	return table.concat(result," | ")
end

function toShortStringForObjectList()
	local result = {};
	table.insert(result, getLastName())
	table.insert(result, getFirstName())	
	table.insert(result, getMiddleName())
	table.insert(result, ", ")	
	table.insert(result, getBirthday())	
	return table.concat(result," ")
end

function clearEntity()
	clearEntities()
	setEntityRecord(nil)
	setLastName(nil)
	setFirstName(nil)
	setMiddleName(nil)
	setBirthday(nil)
	setGender(nil)
	setMaritalStatus(nil)
	setSortOfPerson({})
	setCitizenship(nil)
	setAdditionalInfo({})	
	setSidPersonKomplat(nil)
	setSidBankClient({})
	setFullName(nil)
end