local connectionType = nil;
local note = nil;
local entityBaseCode = nil;
local entityRecord = nil;
local organizationEntities = {}
local personEntities = {}
local connectionEntities = {}
local classManager = nil;
local logger = nil;

function initLogger()
	if logger == nil then
		logger = getClassManager().getClass("Logger");	
	end
end

function getClassManager()
    return classManager;
end
function setClassManager(classManagerValue)
    classManager = classManagerValue;
end

function getConnectionType()	
    return connectionType;
end
function getConnectionTypeDefinition()	
	local defIndexes = getClassManager().getClass("Service").getIndexesFromTable(
						getClassManager().getClass("Constanta").getDpdConnectionTypeCodes(),getConnectionType());		
	return getClassManager().getClass("Service").getItemFromTableByIndex(getClassManager().getClass("Constanta").getDpdConnectionTypeDefinitions(),
																		getClassManager().getClass("Service").getItemFromTableByIndex(defIndexes,1));
end
function setConnectionType(connectionTypeValue)    
	connectionType = connectionTypeValue;
end

function getNote()
    return note;
end
function setNote(noteValue)
    note = noteValue;
end

function getEntityBaseCode()
    return entityBaseCode;
end
function setEntityBaseCode(entityBaseCodeValue)
    entityBaseCode = entityBaseCodeValue;
end

function getOrganizationEntities()
    return organizationEntities;
end
function addOrganizationEntity(newOrganizationEntity)
    table.insert(organizationEntities,newOrganizationEntity);
end
function setOrganizationEntities(newOrganizationEntities)
    organizationEntities = newOrganizationEntities;
end

function getPersonEntities()
    return personEntities;
end
function addPersonEntity(newPersonEntity)
    table.insert(personEntities,newPersonEntity);
end
function setPersonEntities(newPersonEntities)
    personEntities = newPersonEntities;
end

function getConnectionEntities()
    return connectionEntities;
end
function addConnectionEntity(newConnectionEntity)
    table.insert(connectionEntities,newConnectionEntity);
end
function setConnectionEntities(newConnectionEntities)
    connectionEntities = newConnectionEntities;
end

function getEntityRecord()
    return entityRecord;
end
function setEntityRecord(entityRecordValue)
    entityRecord = entityRecordValue;
end
----------------------------------------------
function setBeanFromLine(dataTable, configTable, mode, isCurrentEntityOnly) -- передаем таблицу с данными для загрузки и  таблицу с конфигурацией для загрузки
	initLogger();
	local messages = {};	
	local configValues = "";
	local tConfigValues = "";
	local terminPosition = 0;
	local fieldNumber = 0;
	local extractedTermin = "";	
	local isConnectedEntityNew = true;
	local passedEntitiesCodes = {}
	for index, tConfigValues in ipairs(configTable) do		
		local localVocKey = nil;				
		logger.writeDebugMessage( getClassManager(),"Получена конфигурациz: "..render(tConfigValues));
		logger.writeDebugMessage( getClassManager(),"Получение номера аттрибута базы данных");
		fieldNumber = tonumber(tConfigValues[3]);	
		logger.writeDebugMessage(getClassManager(),"Получение позиции в строке загрузки");		
		if (string.sub(tConfigValues[1],1,1) ~= "@") then
			terminPosition = tonumber(tConfigValues[1]);					
			logger.writeDebugMessage( getClassManager(),"Получение термина строки по позиции № "..terminPosition);
			extractedTermin = dataTable[terminPosition];
		else
			extractedTermin = string.sub(tConfigValues[1],2);
			localVocKey = tonumber(extractedTermin)
		end		
		logger.writeDebugMessage( getClassManager(), "Был получен термин для загрузки в поле "..fieldNumber);
		if (extractedTermin ~= nil and string.len(extractedTermin)>0) then
			if (tConfigValues[2] == getEntityBaseCode()) then
				if(fieldNumber == 6) then
					setNote(extractedTermin);			
				else
					local vocCode = getClassManager().getClass("FieldsWorker").getVocFieldBaseCode(getClassManager(),getEntityBaseCode(),fieldNumber)					
					if (vocCode ~= nil) then				
						if (localVocKey == nil) then
							localVocKey, errorMessages = getClassManager().getClass("DBWorker").convertExternalVocTermin(getClassManager(), extractedTermin, vocCode);				
							for _,message in pairs(errorMessages) do
								table.insert(messages, message)
							end
						end	
						if (fieldNumber == 1) then									
							setConnectionType(localVocKey);						
						end
					else
						logger.writeDebugMessage( getClassManager(), "Поле № "..fieldNumber.. " не обрабатывает программным объектом");
					end
				end
			else
				isConnectedEntityNew = table.count(getClassManager().getClass("Service").getIndexesFromTable(passedEntitiesCodes, tConfigValues[2]))==0
				if (not isCurrentEntityOnly) then
					logger.writeDebugMessage( getClassManager(),"Термин принадлежит базе данных с мнемокодом "..tConfigValues[2]);			
					logger.writeDebugMessage( getClassManager(),"Создание нового программного объекта")
					local connectedEntity = getClassManager().newEntity(getClassManager(), tConfigValues[2], true, isConnectedEntityNew)			
					if (isConnectedEntityNew) then
						logger.writeDebugMessage( getClassManager(),"Добавление созданного объекта для установления связи")				
						addConnectedEntity (connectedEntity);			
					end
					isConnectedEntityNew = false;				
					logger.writeDebugMessage( getClassManager(),"Заполнение программного объекта на основе данных из файла загрузки и запись полученных сообщений");																								
					local errorMessages = connectedEntity.setBeanFromLine(dataTable, {tConfigValues}, mode); 						
					for _,message in pairs(errorMessages) do
						table.insert(messages, message)
					end	
					logger.writeDebugMessage(getClassManager(),"Проверка режима работы системы: "..mode);	
					if (mode == getClassManager().getClass("Constanta").getCnstDataLoaderLoadMode()) then
						logger.writeDebugMessage(getClassManager(),"Сохранение программного объекта в базу данных с мнемокодом "..tConfigValues[2]);																													
						connectedEntity.saveBeanToDb();						
					end
				end
			end
			table.insert(passedEntitiesCodes,tConfigValues[2]);
		end
	end	
	return messages;
end

function addConnectedEntity (connectedEntity)
	local connectedEntityCode = connectedEntity.getEntityBaseCode();
	if (connectedEntityCode == getClassManager().getClass("Constanta").getCnstOrganization()) then
		addOrganizationEntity(connectedEntity);			
	elseif (connectedEntityCode == getClassManager().getClass("Constanta").getCnstPerson()) then
		addPersonEntity(connectedEntity);		
	elseif (connectedEntityCode == getClassManager().getClass("Constanta").getCnstConnection()) then
		addConnectionEntity(connectedEntity);		
	end
end

function getAttributeByFieldNumber(fieldNumber)
	local attribute = nil;
	local noAttributeLineDefined = false;
	fieldNumber = tonumber(fieldNumber)	
	if (fieldNumber == 1) then									
		attribute = getConnectionType();		
	elseif(fieldNumber == 6) then
		attribute = getNote();	
	else
		noAttributeLineDefined = true;
	end		
	--необходимо для логики выдачи сообщения про неопределенный номер поля в данном методе
	if (noAttributeLineDefined == false and attribute == nil) then
		attribute = "";		
	end	
	return attribute;
end
------------------------------------------------------------
function clearEntities()
	setConnectionEntities({})
	setOrganizationEntities({})
	setPersonEntities({})
end

function setLinks()	
	local connectionTypeBase = CroApp.GetBank():GetBase(getClassManager().getClass("Constanta").getCnstConnectionType());														
	--organizations linking			
	for key, organizationEntity in pairs(getOrganizationEntities()) do						
		if (organizationEntity.getEntityRecord() ~= nil) then					
			local orgBase = CroApp.GetBank():GetBase(getClassManager().getClass("Constanta").getCnstOrganization());											
			if (getClassManager().getClass("DBWorker").isRecordLocked(getClassManager(), getEntityRecord())) then
				getEntityRecord():Unlock();
			end
			if (getClassManager().getClass("DBWorker").isRecordLocked(getClassManager(), organizationEntity.getEntityRecord())) then
				organizationEntity.getEntityRecord():Unlock();
			end			
			connectionTypeBase:AddLink(getEntityRecord().SN,8,orgBase,organizationEntity.getEntityRecord().SN, Base.LockWait, Base.LockWait);								
		end
	end
	--persons linking		
	for key, personEntity in pairs(getPersonEntities()) do	
		if (personEntity.getEntityRecord() ~= nil) then
			local personBase = CroApp.GetBank():GetBase(getClassManager().getClass("Constanta").getCnstPerson());					
			if (getClassManager().getClass("DBWorker").isRecordLocked(getClassManager(), getEntityRecord())) then
				getEntityRecord():Unlock();
			end
			if (getClassManager().getClass("DBWorker").isRecordLocked(getClassManager(), personEntity.getEntityRecord())) then
				personEntity.getEntityRecord():Unlock();
			end
			connectionTypeBase:AddLink(getEntityRecord().SN,8,personBase,personEntity.getEntityRecord().SN, Base.LockWait, Base.LockWait);																	
		end
	end	
	--connetcion linking		
	for key, connectionEntity in pairs(getConnectionEntities()) do			
		if (connectionEntity.getEntityRecord() ~= nil) then			
			local connectionBase = CroApp.GetBank():GetBase(getClassManager().getClass("Constanta").getCnstConnection());	
			if (getClassManager().getClass("DBWorker").isRecordLocked(getClassManager(), getEntityRecord())) then
				getEntityRecord():Unlock();
			end			
			if (getClassManager().getClass("DBWorker").isRecordLocked(getClassManager(), connectionEntity.getEntityRecord())) then
				connectionEntity.getEntityRecord():Unlock();
			end
			connectionTypeBase:AddLink(getEntityRecord().SN,5,connectionBase,connectionEntity.getEntityRecord().SN, Base.LockWait, Base.LockWait);																				
		end
	end		
	setEntityRecord(connectionTypeBase:GetRecord(getEntityRecord().SN));
end

function setBeanFromRecord(connectionTypeRecord)	
	local connectionTypeBaseCode = getEntityBaseCode();
	if connectionTypeRecord.Base.Code == connectionTypeBaseCode then		
		setEntityRecord(connectionTypeRecord)				
		setConnectionType(	getClassManager().getClass("FieldsWorker").getField(connectionTypeBaseCode, connectionTypeRecord , 1 , "" , "", ""));
		setNote(			getClassManager().getClass("FieldsWorker").getField(connectionTypeBaseCode, connectionTypeRecord , 6 , "" , "", ""));		
	end
end

function setBeanFromView(view)		
	setConnectionType(view.getDpdConnectionTypeSelectedCode());		
	setNote(view.getTxtNoteText());		
end

function saveBeanToDb(connectionTypeRecord)
	local saveResult = true;	
	local connectionTypeBaseCode = getEntityBaseCode();
	if (getEntityRecord() == nil) then		
		setEntityRecord(CroApp.GetBank():GetBase(connectionTypeBaseCode):AddRecord())					
	end		
	local connectionTypeRecord = getEntityRecord();
	if connectionTypeRecord.Base.Code == connectionTypeBaseCode then		
		getClassManager().getClass("FieldsWorker").setField(connectionTypeBaseCode, connectionTypeRecord, 1, "", getConnectionType(), nil, nil, true);		
		getClassManager().getClass("FieldsWorker").setField(connectionTypeBaseCode, connectionTypeRecord, 6, "", getNote(), nil, nil, false);		
		setLinks()	
	else
		saveResult = false;
	end
	return saveResult;
end

function toShortString(withConnection)
	local result = {};		
	table.insert(result, getConnectionTypeDefinition());		
	if (withConnection) then				
		for key, connectionEntity in pairs(getConnectionEntities()) do							
			connectionEntity.setBeanFromRecord(connectionEntity.getEntityRecord());			
			table.insert(result, connectionEntity.toShortString(false));	
		end
		for key, organizationEntity in pairs(getOrganizationEntities()) do							
			organizationEntity.setBeanFromRecord(organizationEntity.getEntityRecord());
			table.insert(result, organizationEntity.toShortString(false));	
		end	
		for key, personEntity in pairs(getPersonEntities()) do							
			personEntity.setBeanFromRecord(personEntity.getEntityRecord());
			table.insert(result, personEntity.toShortString(false));	
		end	
	end			
	return table.concat(result," | ")
end

function clearEntity()
	clearEntities()
	setEntityRecord(nil)				
	setConnectionType(nil)				
	setNote(nil)				
end