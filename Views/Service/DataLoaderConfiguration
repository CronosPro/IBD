local ClassManager = nil;
local Entity = nil;
local unloadController = nil;
local formsController = nil;
local constanta = nil;
local objectList = nil;
local childForms = {};
local currentForm = nil;
local bankProperties = {};
local directoryPath = nil;

local txtDirectoryPath = nil;
local treeDirectories = nil;
local lblLineNumber = nil;
local txtLineNumber = nil;
local lblTerminSeparator = nil;
local txtTerminSeparator = nil;
local lstTerminNumber = nil;
local lstTermin = nil;
local chkIsSearchKey = nil;
local txtResultedConfigurtion = nil;
local lblBase = nil;
local dpdBase = nil;
local pnlTermins = nil;
local txtDefaultValue = nil;
local chkDefaultValue = nil;
local chkConnectionConfiguration = nil;
local btnPreviousLoadConfiguration = nil;
local txtLoadConfigurationNumber = nil;
local btnNextLoadConfiguration = nil;
local pnlLoadConfiguration = nil;
local btnDeleteLoadConfiguration = nil;

local configurationTable = {}
configurationTable["loadConfiguration"] = {}
configurationTable["keySet"] = {}
configurationTable["connectionConfiguration"] = ""
configurationTable["terminSeparator"] = ";"
configurationTable["skipLines"] = ""
local fullPath = ""
local fileName = ""
local deleteLoadConfigurationButtonTextt = "Удалить текущую конфигурацию загрузки: "

function setClassManager(ClassManagerNew)
    ClassManager = ClassManagerNew;
end
function getClassManager()
    return ClassManager;
end

function getObjectList()
    return objectList;
end
function setObjectList(objectListValue)
    objectList = objectListValue;
end

function setCurrentForm(currentFormNew)
    currentForm = currentFormNew;
end
function getCurrentForm()
    return currentForm;
end


function getBankProperties()
    return bankProperties;
end
function addBankProperties(newBankProperties)
    table.insert(bankProperties,newBankProperties);
end
function setBankProperties(newBankProperties)
    bankProperties = newBankProperties;
end

function Форма_Open( form	)
	setCurrentForm(form);
    setClassManager(Arg.ClassManager)
    setControllersReferences()
    return true;
end

function Форма_Load( form )
    getClassManager().setClass(form, form)    
	setControls(form);	
	setFormBackColor(constanta.getSystemBackColor());	
end

function setControllersReferences()
    unloadController = getClassManager().getClass("UnloadController");
    formsController = getClassManager().getClass("FormsController");
	validationController = getClassManager().getClass("ValidationController");
	requestController = getClassManager().getClass("RequestController");
	service = getClassManager().getClass("Service");
    constanta = getClassManager().getClass("Constanta");
end

function Форма_UnloadForm( form, mode )
    unloadController.doUnload(getClassManager(), form, childForms);
    getClassManager().setClass(form, nil)
    return true;
end

function setControls(form)   	
	txtDirectoryPath = form.txtDirectoryPath;
    treeDirectories = form.treeDirectories;
	btnSaveConfiguration = form.btnSaveConfiguration;
    lblDataBase = form.lblDataBase;
    dpdDataBase = form.dpdDataBase;
    lblField = form.lblField;
    dpdField = form.dpdField;
	lblLineNumber = form.lblLineNumber;
    txtLineNumber = form.txtLineNumber;
    lblTerminSeparator = form.lblTerminSeparator;
    txtTerminSeparator = form.txtTerminSeparator;
    lstTerminNumber = form.lstTerminNumber;
    lstTermin = form.lstTermin;
	chkIsSearchKey = form.chkIsSearchKey;
	txtResultedConfigurtion = form.txtResultedConfigurtion;
	lblBase = form.lblBase;
    dpdBase = form.dpdBase;
	pnlTermins = form.pnlTermins;
	txtDefaultValue = form.txtDefaultValue;
    chkDefaultValue = form.chkDefaultValue;
	chkConnectionConfiguration = form.chkConnectionConfiguration;
	btnPreviousLoadConfiguration = form.btnPreviousLoadConfiguration;
    txtLoadConfigurationNumber = form.txtLoadConfigurationNumber;
    btnNextLoadConfiguration = form.btnNextLoadConfiguration;
	pnlLoadConfiguration = form.pnlLoadConfiguration;
	btnDeleteLoadConfiguration = form.btnDeleteLoadConfiguration;
    populateLists();
end

function populateLists()
	setBankProperties(getClassManager().getClass("DBWorker").descoverDataBaseProperties(getClassManager()))			
	local bankBases = {}
	for key, value in pairs (getBankProperties()) do			
		table.insert(bankBases, getClassManager().getClass("DBWorker").getDataBaseConcatenatedName(getClassManager(), key))			
	end	
	table.sort(bankBases)
	table.insert(bankBases, 1, "")	
	addDpdDataBaseItems(bankBases)
	addDpdBaseItems(bankBases)
end
----------------------------------------------------------
function getDirectoryPath()
    return directoryPath;
end
function setDirectoryPath(directoryPathValue)
    directoryPath = directoryPathValue;	
	setTxtDirectoryPathText(directoryPathValue)	
end

function getTxtDirectoryPathText( )
    return txtDirectoryPath.Text
end
function setTxtDirectoryPathText( txtDirectoryPathValue )	
    txtDirectoryPath.Text = txtDirectoryPathValue	
	populateDirectoryTree()
end
function setTxtDirectoryPathEnabled( isTxtDirectoryPathEnabled )
   txtDirectoryPath.Enabled = isTxtDirectoryPathEnabled
end

function getTreeDirectoriesText( )
    return treeDirectories.Text
end
function setTreeDirectoriesText( treeDirectoriesValue )
    treeDirectories.Text = treeDirectoriesValue
end
function setTreeDirectoriesEnabled( isTreeDirectoriesEnabled )
   treeDirectories.Enabled = isTreeDirectoriesEnabled
end

function setLblDataBaseText( lblDataBaseValue )
   lblDataBase.Text = lblDataBaseValue
end
function getLblDataBaseText( )
    return lblDataBase.Text
end

function addDpdDataBaseItem( dpdDataBaseValue )
   dpdDataBase:Add(dpdDataBaseValue)
end
function addDpdDataBaseItems( dpdDataBaseValues )
    if dpdDataBaseValues ~= nil then        
		for key, value in pairs (dpdDataBaseValues) do			
            addDpdDataBaseItem(value)			
        end
    end	
end
function clearDpdDataBaseItems( )
   dpdDataBase:Clear(index)
end
function getDpdDataBaseSelectedItem( )
    return dpdDataBase.Text
end
function setDpdDataBaseSelectedItem( dpdDataBaseItemValue)
    dpdDataBase.SelectedItem = dpdDataBaseItemValue
end
function getDpdDataBaseSelectedIndex( )
    return dpdDataBase.SelectedIndex
end
function getDpdDataBaseSelectedCode( )
    return dpdDataBase.Text
end
function setDpdDataBaseSelectedIndex( dpdDataBaseIndexValue )
    dpdDataBase.SelectedIndex = dpdDataBaseIndexValue
end
function setDpdDataBaseEnabled( isDpdDataBaseEnabled )
   dpdDataBase.Enabled = isDpdDataBaseEnabled
end

function setLblFieldText( lblFieldValue )
   lblField.Text = lblFieldValue
end
function getLblFieldText( )
    return lblField.Text
end

function addDpdFieldItem( dpdFieldValue )
   dpdField:Add(dpdFieldValue)
end
function addDpdFieldItems( dpdFieldValues )
    if dpdFieldValues ~= nil then
        for key, value in pairs (dpdFieldValues) do
            addDpdFieldItem(value)
        end
    end
end
function clearDpdFieldItems( )
   dpdField:Clear()      
end
function getDpdFieldSelectedItem( )
    return dpdField.Text
end
function setDpdFieldSelectedItem( dpdFieldItemValue)
    dpdField.SelectedItem = dpdFieldItemValue
end
function getDpdFieldSelectedIndex( )
    return dpdField.SelectedIndex
end
function setDpdFieldSelectedIndex( dpdFieldIndexValue )
    dpdField.SelectedIndex = dpdFieldIndexValue
end
function setDpdFieldEnabled( isDpdFieldEnabled )
   dpdField.Enabled = isDpdFieldEnabled
end

function setLblLineNumberText( lblLineNumberValue )
   lblLineNumber.Text = lblLineNumberValue
end
function getLblLineNumberText( )
    return lblLineNumber.Text
end

function getTxtLineNumberText( )
    return txtLineNumber.Text
end
function setTxtLineNumberText( txtLineNumberValue )
    txtLineNumber.Text = txtLineNumberValue
end
function setTxtLineNumberEnabled( isTxtLineNumberEnabled )
   txtLineNumber.Enabled = isTxtLineNumberEnabled
end

function setLblTerminSeparatorText( lblTerminSeparatorValue )
   lblTerminSeparator.Text = lblTerminSeparatorValue
end
function getLblTerminSeparatorText( )
    return lblTerminSeparator.Text
end

function getTxtTerminSeparatorText( )
    return txtTerminSeparator.Text
end
function setTxtTerminSeparatorText( txtTerminSeparatorValue )
    txtTerminSeparator.Text = txtTerminSeparatorValue
end
function setTxtTerminSeparatorEnabled( isTxtTerminSeparatorEnabled )
   txtTerminSeparator.Enabled = isTxtTerminSeparatorEnabled
end

function addLstTerminNumberItem( lstTerminNumberValue )
   lstTerminNumber:Add(lstTerminNumberValue)
end
function insertLstTerminNumberItem( lstTerminNumberValue, index )
   lstTerminNumber:Insert(lstTerminNumberValue, index);
end
function addLstTerminNumberItems( lstTerminNumberValues )
    if lstTerminNumberValues ~= nil then
        for key, value in pairs (lstTerminNumberValues) do
            addLstTerminNumberItem(value);
        end
    end
end
function clearLstTerminNumberItems( )
   lstTerminNumber:Clear();
end
function removeLstTerminNumberItem( index )
   lstTerminNumber:Remove(index);
end
function getLstTerminNumberItem( index )
    return lstTerminNumber:GetItem(index);
end
function setLstTerminNumberItemChecked( index, isChecked)
    lstTerminNumber:SetItemChecked(index, isChecked);
end
function isLstTerminNumberItemChecked( lstTerminNumberIndexValue )
    lstTerminNumber:IsIndexChecked (lstTerminNumberIndexValue);
end
function getLstTerminNumberSelectedIndex( )
    return lstTerminNumber.SelectedIndex;
end
function setLstTerminNumberSelectedIndex( lstTerminNumberIndexValue)
	lstTerminNumber.SelectedIndex = lstTerminNumberIndexValue
end

function getLstTerminNumberSelectedItem( )
    return lstTerminNumber.SelectedItem;
end
function setLstTerminNumberSelectedItem(lstTerminItemValue )
    lstTerminNumber.SelectedItem = lstTerminItemValue
end

function getLstTerminNumberCheckedItems( )
    return lstTerminNumber.CheckedItems;
end
function getLstTerminNumberCheckedIndices( )
    return lstTerminNumber.CheckedIndices;
end
function getLstTerminNumberItemsCount( )
    return lstTerminNumber.ItemsCount;
end
function setLstTerminNumberEnabled( isLstTerminNumberEnabled )
   lstTerminNumber.Enabled = isLstTerminNumberEnabled
end

function addLstTerminItem( lstTerminValue )
   lstTermin:Add(lstTerminValue)
end
function insertLstTerminItem( lstTerminValue, index )
   lstTermin:Insert(lstTerminValue, index);
end
function addLstTerminItems( lstTerminValues )
    if lstTerminValues ~= nil then
        for key, value in pairs (lstTerminValues) do
            addLstTerminItem(value);
        end
    end
end
function clearLstTerminItems( )
   lstTermin:Clear();
end
function removeLstTerminItem( index )
   lstTermin:Remove(index);
end
function getLstTerminItem( index )
    return lstTermin:GetItem(index);
end
function setLstTerminItemChecked( index, isChecked)
    lstTermin:SetItemChecked(index, isChecked);
end
function isLstTerminItemChecked( lstTerminIndexValue )
    lstTermin:IsIndexChecked (lstTerminIndexValue);
end
function getLstTerminSelectedIndex( )
    return lstTermin.SelectedIndex;
end
function setLstTerminSelectedIndex( lstTerminIndexValue)
    lstTermin.SelectedIndex = lstTerminIndexValue;
end

function getLstTerminSelectedItem( )
    return lstTermin.SelectedItem;
end
function setLstTerminSelectedItem(lstTerminItemValue)
    lstTermin.SelectedItem = lstTerminItemValue;
end

function getLstTerminCheckedItems( )
    return lstTermin.CheckedItems;
end
function getLstTerminCheckedIndices( )
    return lstTermin.CheckedIndices;
end
function getLstTerminItemsCount( )
    return lstTermin.ItemsCount;
end
function setLstTerminEnabled( isLstTerminEnabled )
   lstTermin.Enabled = isLstTerminEnabled
end

function setChkIsSearchKey( chkIsSearchKeyValue )
   chkIsSearchKey.Check = chkIsSearchKeyValue
end
function setIsChkIsSearchKey(isSearchKey)
    chkIsSearchKey.Check = isSearchKey
end
function isChkIsSearchKey()
    return chkIsSearchKey.Check
end
function setChkIsSearchKeyText( chkIsSearchKeyValue )
   chkIsSearchKey.Text = chkIsSearchKeyValue
end
function getChkIsSearchKeyText( )
    return chkIsSearchKey.Text
end
function setChkIsSearchKeyEnabled( isChkIsSearchKeyEnabled )
   chkIsSearchKey.Enabled = isChkIsSearchKeyEnabled
end

function getTxtResultedConfigurtionText( )
    return txtResultedConfigurtion.Text
end
function setTxtResultedConfigurtionText( txtResultedConfigurtionValue )
    txtResultedConfigurtion.Text = txtResultedConfigurtionValue
end
function setTxtResultedConfigurtionEnabled( isTxtResultedConfigurtionEnabled )
   txtResultedConfigurtion.Enabled = isTxtResultedConfigurtionEnabled
end

function setLblBaseText( lblBaseValue )
   lblBase.Text = lblBaseValue
end
function getLblBaseText( )
    return lblBase.Text
end

function addDpdBaseItem( dpdBaseValue )
   dpdBase:Add(dpdBaseValue)
end
function addDpdBaseItems( dpdBaseValues )
    if dpdBaseValues ~= nil then
        for key, value in pairs (dpdBaseValues) do
            addDpdBaseItem(value)
        end
    end
end
function clearDpdBaseItems( )
   dpdBase:Clear(index)
end
function getDpdBaseSelectedItem( )
    return dpdBase.SelectedItem
end
function setDpdBaseSelectedItem( dpdBaseItemValue)
    dpdBase.SelectedItem = dpdBaseItemValue
end
function getDpdBaseSelectedIndex( )
    return dpdBase.SelectedIndex
end
function getDpdBaseSelectedCode( )
    return dpdBase.SelectedCode
end
function setDpdBaseSelectedIndex( dpdBaseIndexValue )
    dpdBase.SelectedIndex = dpdBaseIndexValue
end
function setDpdBaseEnabled( isDpdBaseEnabled )
   dpdBase.Enabled = isDpdBaseEnabled
end

function setPnlTerminsEnabled( pnlTerminsValue )
   pnlTermins.Enabled = pnlTerminsValue
end
function isPnlTerminsEnabled( )
   return pnlTermins.Enabled
end
function setPnlTerminsVisible( pnlTerminsValue )
   pnlTermins.Visible = pnlTerminsValue
end
function isPnlTerminsVisible( )
   return pnlTermins.Visible
end

function getTxtDefaultValueText( )
    return txtDefaultValue.Text
end
function setTxtDefaultValueText( txtDefaultValueValue )
    txtDefaultValue.Text = txtDefaultValueValue
end
function setTxtDefaultValueEnabled( isTxtDefaultValueEnabled )
   txtDefaultValue.Enabled = isTxtDefaultValueEnabled
end
function setTxtDefaultValueVisible( isTxtDefaultValueVisible )
   txtDefaultValue.Visible = isTxtDefaultValueVisible
end

function setChkDefaultValue( chkDefaultValueValue )
   chkDefaultValue.Check = chkDefaultValueValue
end
function isChkDefaultValue( )
    return chkDefaultValue.Check
end
function setChkDefaultValueText( chkDefaultValueValue )
   chkDefaultValue.Text = chkDefaultValueValue
end
function getChkDefaultValueText( )
    return chkDefaultValue.Text
end
function setChkDefaultValueEnabled( isChkDefaultValueEnabled )
   chkDefaultValue.Enabled = isChkDefaultValueEnabled
end

function setChkConnectionConfiguration( chkConnectionConfigurationValue )
   chkConnectionConfiguration.Check   = chkConnectionConfigurationValue
end
function isChkConnectionConfiguration( )
    return chkConnectionConfiguration.Check
end
function setChkConnectionConfigurationText( chkConnectionConfigurationValue )
   chkConnectionConfiguration.Text = chkConnectionConfigurationValue
end
function getChkConnectionConfigurationText( )
    return chkConnectionConfiguration.Text
end
function setChkConnectionConfigurationEnabled( isChkConnectionConfigurationEnabled )
   chkConnectionConfiguration.Enabled = isChkConnectionConfigurationEnabled
end

function setBtnPreviousLoadConfigurationText( btnPreviousLoadConfigurationValue )
   btnPreviousLoadConfiguration.Text = btnPreviousLoadConfigurationValue
end
function getBtnPreviousLoadConfigurationText( )
    return btnPreviousLoadConfiguration.Text
end
function setBtnPreviousLoadConfigurationEnabled( isBtnPreviousLoadConfigurationEnabled )
   btnPreviousLoadConfiguration.Enabled = isBtnPreviousLoadConfigurationEnabled
end

function getTxtLoadConfigurationNumberText( )
    return txtLoadConfigurationNumber.Text
end
function setTxtLoadConfigurationNumberText( txtLoadConfigurationNumberValue )
    txtLoadConfigurationNumber.Text = txtLoadConfigurationNumberValue
end
function setTxtLoadConfigurationNumberEnabled( isTxtLoadConfigurationNumberEnabled )
   txtLoadConfigurationNumber.Enabled = isTxtLoadConfigurationNumberEnabled
end

function setBtnNextLoadConfigurationText( btnNextLoadConfigurationValue )
   btnNextLoadConfiguration.Text = btnNextLoadConfigurationValue
end
function getBtnNextLoadConfigurationText( )
    return btnNextLoadConfiguration.Text
end
function setBtnNextLoadConfigurationEnabled( isBtnNextLoadConfigurationEnabled )
   btnNextLoadConfiguration.Enabled = isBtnNextLoadConfigurationEnabled
end

function setPnlLoadConfigurationEnabled( pnlLoadConfigurationValue )
   pnlLoadConfiguration.Enabled = pnlLoadConfigurationValue
end
function isPnlLoadConfigurationEnabled( )
   return pnlLoadConfiguration.Enabled
end
function setPnlLoadConfigurationVisible( pnlLoadConfigurationValue )
   pnlLoadConfiguration.Visible = pnlLoadConfigurationValue
end
function isPnlLoadConfigurationVisible( )
   return pnlLoadConfiguration.Visible
end

function setBtnDeleteLoadConfigurationText( btnDeleteLoadConfigurationValue )
   btnDeleteLoadConfiguration.Text = btnDeleteLoadConfigurationValue
end
function getBtnDeleteLoadConfigurationText( )
    return btnDeleteLoadConfiguration.Text
end
function setBtnDeleteLoadConfigurationEnabled( isBtnDeleteLoadConfigurationEnabled )
   btnDeleteLoadConfiguration.Enabled = isBtnDeleteLoadConfigurationEnabled
end
function setBtnDeleteLoadConfigurationVisible( isBtnDeleteLoadConfigurationVisible )
   btnDeleteLoadConfiguration.Visible = isBtnDeleteLoadConfigurationVisible
end
---------------------------------------------
function setControlEnabled(control, isEnabled)
	control.Enabled = isEnabled
end

function setFormBackColor( formBackColor )
   getCurrentForm().BackColor = formBackColor
end

function populateDirectoryTree ()	  
	local treeTable = {}
	local directoryTable = {}	
	local filesTable = {}		
	directoryTable = getClassManager().getClass("DataLoader").constructDirectiryTable(getClassManager(), getTxtDirectoryPathText(), "", directoryTable)	
	treeDirectories:LoadFromTable (directoryTable, nil, "ret_table")
end


function dpdDataBase_SelectedIndexChanged( control, index )
	clearDpdFieldItems()		
	doViewLogic()	
	local dataBaseName = getDpdDataBaseSelectedItem();				
	if (string.len(dataBaseName) > 0 and getDpdDataBaseSelectedIndex()>0) then
		local dataBaseCode = dataBaseName:split(" - ")[2]	
		local dataBaseFields = getBankProperties()[dataBaseCode];	
		local baseFields = {}	
		for key, value in pairs (dataBaseFields) do		
			table.insert(baseFields, getClassManager().getClass("DBWorker").getDataBaseFieldConcatenatedName(ClassManager, dataBaseCode, key))			
		end		
		table.sort(baseFields)
		addDpdFieldItems(baseFields)				
	end	
end

function treeDirectories_SelectionChanged( event )			
	local parentItem = treeDirectories.SelectedItem.ParentItem	
	fullPath =  treeDirectories.SelectedItem.Text;		
	if (getDpdBaseSelectedIndex() > 0) then
		setDpdBaseSelectedIndex(0)
	end
	setDpdBaseEnabled(false)
	setTxtResultedConfigurtionText(nil)
	if treeDirectories.SelectedItem.ChildrenCount == 0 then		
		fileName = fullPath;	
		while parentItem ~= nil do
			fullPath = IO.Path.AddSlash(parentItem.Text)..fullPath		
			parentItem = parentItem.ParentItem
		end	
		--проверка, существует ли данный файл, так как узел может быть и директорией
		local fileData, errStr, errID = READFILE(fullPath)		
		if fileData then	
			setDpdBaseEnabled(true)
			configurationTable["loadConfiguration"]= {}
			configurationTable["keySet"] = {}
			configurationTable["connectionConfiguration"] = {}			
			configurationTable["skipLines"] = {}
			configurationTable = readConfigInCurrentDirectory(string.swap(fullPath,fileName, "config.ini"))	
			if (string.len(configurationTable["skipLines"]) > 0) then			
				local skipLines = configurationTable["skipLines"]:split(";")
				setTxtLineNumberText(skipLines[table.count(skipLines)]+1)					
			else
				setTxtLineNumberText(1)	
			end
			if configurationTable["terminSeparator"] == nil or string.len(configurationTable["terminSeparator"]) == 0 then
				configurationTable["terminSeparator"] = ";"			
			end		
			setTxtTerminSeparatorText(configurationTable["terminSeparator"])
			if (configurationTable["base"] ~= nil) then
				local dataBaseConcatenatedName = getClassManager().getClass("DBWorker").getDataBaseConcatenatedName(getClassManager(), configurationTable["base"])
				if (string.len(dataBaseConcatenatedName) > 0) then
					setDpdBaseSelectedItem(dataBaseConcatenatedName)		
				else
					MsgBox("ОШИБКА В ФАЙЛЕ КОНФИГУРАЦИИ:\nНе существует бызы данных с мнемокодом "..configurationTable["base"], IconError)
				end
			end			
			setTxtLoadConfigurationNumberText(1)
			prepareTermins()			
			doViewLogic()		
		end		
	end	
end

function prepareTermins()
	local parentItem = treeDirectories.SelectedItem.ParentItem	
	local fullPath =  treeDirectories.SelectedItem.Text;	
	if treeDirectories.SelectedItem.ChildrenCount == 0 then
		local fileName = fullPath;
		while parentItem ~= nil do
			fullPath = IO.Path.AddSlash(parentItem.Text)..fullPath		
			parentItem = parentItem.ParentItem
		end						
		local terminsNumbers, termins = getClassManager().getClass("DataLoader").readFileForConfiguration(		
											getClassManager(), fullPath, tonumber(getTxtLineNumberText()), configurationTable["terminSeparator"])						
		clearLstTerminNumberItems()
		clearLstTerminItems()		
		addLstTerminNumberItems(terminsNumbers)				
		addLstTerminItems(termins)					
		if tonumber(getTxtLineNumberText()) > 1 then
			local skipLinesTable = {}
			for i=1,tonumber(getTxtLineNumberText()-1) do
				table.insert(skipLinesTable, i)				
			end
			configurationTable["skipLines"] = table.concat(skipLinesTable, ";")
		else
			configurationTable["skipLines"] = ""
		end		
		printOutConfiguration()
	end	
end

function readConfigInCurrentDirectory(filePath)
	local configuration = {}
	if IO.File.Exists (filePath) then
		configuration = getClassManager().getClass("DataLoader").detectConfiguration(getClassManager(), filePath)					
		local loadConfiguration = {}	
		for index, value in pairs (configuration["loadConfiguration"]) do
			loadConfiguration[index] = {}	
			local valueParts = string.split(value,";")		
			for _, valuePart in pairs (valueParts) do
				valuePart = string.swap(valuePart,"{", "")
				valuePart = string.swap(valuePart,"}", "")			
				local parts = string.split(valuePart, ",")			
				if (tonumber(parts[1]) ~= nil) then
					loadConfiguration[index][tonumber(parts[1])] = parts;
				else				
					loadConfiguration[index][parts[2]..parts[3]] = parts;
				end
			end		
		end
		configuration["loadConfiguration"] = loadConfiguration	
		local connectionConfiguration = {}	
		for _, valuePart in pairs (configuration["connectionConfiguration"]:split(";")) do						
			valuePart = string.swap(valuePart,"{", "")
			valuePart = string.swap(valuePart,"}", "")			
			local parts = string.split(valuePart, ",")			
			if (tonumber(parts[1]) ~= nil) then
				connectionConfiguration[tonumber(parts[1])] = parts;
			else
				connectionConfiguration[parts[1]] = parts;
			end
		end
		configuration["connectionConfiguration"] = connectionConfiguration		
	else
		configuration["loadConfiguration"] = {}
		configuration["loadConfiguration"][1] = {}
		configuration["keySet"] = {}
		configuration["connectionConfiguration"] = {}		
		configuration["skipLines"] = ""
	end
	return configuration
end
	
	
local isSetSelectedItem = true
function lstTerminNumber_SelectedIndexChanged( control, index )	
	if isSetSelectedItem then
		isSetSelectedItem = false
		setLstTerminSelectedIndex(getLstTerminNumberSelectedIndex())		
		getConfiguration()
		doViewLogic()
	else
		isSetSelectedItem = true
	end	
end

function lstTermin_SelectedIndexChanged( control, index )
	if isSetSelectedItem then
		isSetSelectedItem = false
		setLstTerminNumberSelectedIndex(getLstTerminSelectedIndex())								
		getConfiguration()
		doViewLogic()
	else
		isSetSelectedItem = true
	end	
end	

function constructConfiguration()	
	if (getLstTerminNumberSelectedItem() ~= nil) then
		local configuration = {}		
		table.insert(configuration, getLstTerminNumberSelectedItem())			
		table.insert(configuration, string.split(getDpdDataBaseSelectedItem()," - ")[2])
		table.insert(configuration, string.split(getDpdFieldSelectedItem()," - ")[1] )	
		--if table.count(configuration) == 3 then				
			if (configurationTable["loadConfiguration"][tonumber(getTxtLoadConfigurationNumberText())] == nil) then
				configurationTable["loadConfiguration"][tonumber(getTxtLoadConfigurationNumberText())] = {}
			end		
			if (table.count(configuration) ~= 3 ) then
				configuration = nil
			end
			if isChkConnectionConfiguration() then
				configurationTable["connectionConfiguration"][tonumber(getLstTerminNumberSelectedItem())] = configuration-- configurationTermin					
				configurationTable["loadConfiguration"][tonumber(getTxtLoadConfigurationNumberText())][tonumber(getLstTerminNumberSelectedItem())] = nil-- configurationTermin					
			else
				configurationTable["connectionConfiguration"][tonumber(getLstTerminNumberSelectedItem())] = nil -- configurationTermin					
				configurationTable["loadConfiguration"][tonumber(getTxtLoadConfigurationNumberText())][tonumber(getLstTerminNumberSelectedItem())] = configuration-- configurationTermin					
			end
		--end
		printOutConfiguration()
	end
end

function lstTermin_Click( control )
	constructConfiguration()
end

function lstTerminNumber_Click( control )
	constructConfiguration()
end

function getConfiguration()
	--загрузочная конфигурация
	--for index, loadConfiguration in pairs(configurationTable["loadConfiguration"]) do						
		--local configurationTerminTable = loadConfiguration[tonumber(getLstTerminNumberSelectedItem())]					
		local loadConfiguration = configurationTable["loadConfiguration"][tonumber(getTxtLoadConfigurationNumberText())]				
		local configurationTerminTable = loadConfiguration[tonumber(getLstTerminNumberSelectedItem())]							
		setBaseAndFields(configurationTerminTable)				
		--break;
	--end
	
	--конфигурация связывания
	local connectionConfiguration = configurationTable["connectionConfiguration"][tonumber(getLstTerminNumberSelectedItem())]			
	setChkConnectionConfiguration(connectionConfiguration ~= nil)	
	if (connectionConfiguration ~= nil) then
		setChkConnectionConfiguration(true)	
		setBaseAndFields(connectionConfiguration)
	end
end

function setBaseAndFields(configurationTerminTable)
	if (configurationTerminTable ~= nil) then		
		local configurationTermin = table.concat(configurationTerminTable, ",")
		configurationTermin = string.swap(configurationTermin, "{", "")		
		configurationTermin = string.swap(configurationTermin, "}", "")				
		local terminTable = string.split(configurationTermin,",")						
		if table.count(terminTable) > 1 then			
			local baseMnemocode = terminTable[2]
			local fieldNumber = terminTable[3]												
			if (tonumber(fieldNumber) ~= nil)	then		
				setIsChkIsSearchKey(baseMnemocode == configurationTable["base"] and configurationTable["keySet"][tonumber(fieldNumber)]~=nil)				
				baseConcatenatedName = getClassManager().getClass("DBWorker").getDataBaseConcatenatedName(getClassManager(), baseMnemocode)											
				if (string.len (fieldNumber) == 0) then
					MsgBox("ОШИБКА В ФАЙЛЕ КОНФИГУРАЦИИ:\nНе существует базы данных с мнемокодом "..baseMnemocode, IconError)
				end
				fieldConcatenatedName = getClassManager().getClass("DBWorker").getDataBaseFieldConcatenatedName(getClassManager(), baseMnemocode, fieldNumber)											
				if (string.len (fieldConcatenatedName) == 0) then
					MsgBox("ОШИБКА В ФАЙЛЕ КОНФИГУРАЦИИ:\nПоле с номером "..fieldNumber.." не существует в базе данных с мнемокодом "..baseMnemocode, IconError)
				end				
				setDpdDataBaseSelectedItem(baseConcatenatedName)														
				dpdDataBase_SelectedIndexChanged( dpdDataBase, getDpdDataBaseSelectedIndex())								
				setDpdFieldSelectedItem(fieldConcatenatedName)											
			end
		end	
	else				
		setDpdDataBaseSelectedIndex(0)				
		setDpdFieldSelectedIndex(0)
		setIsChkIsSearchKey(false)
	end
end

function chkIsSearchKey_Click( control )
	if (getLstTerminNumberSelectedItem() ~= nil) then
		if (isChkIsSearchKey()) then
			configurationTable["keySet"][tonumber(getLstTerminNumberSelectedItem())] = tonumber(string.split(getDpdFieldSelectedItem(), " - ")[1])	
		else
			local keySet = {}
			local excludingKey = tonumber(string.split(getDpdFieldSelectedItem(), " - ")[1])	
			for _, value in pairs(configurationTable["keySet"]) do				
				if tonumber(value) ~= excludingKey then
					table.insert(keySet, value)
				end
			end
			configurationTable["keySet"] = keySet
		end
		printOutConfiguration()
	end
end

function printOutConfiguration()
	local configTable = {}
	local loadConfigurationTextBox = {}			
	local connectionConfigurationTextBox = {}		
	local keySetTextBox = {}		
	if configurationTable["base"] ~= nil then
		---подготовка конфигурации загрузочной базы данных
		if (string.len(configurationTable["base"]) > 0) then
			setPnlTerminsEnabled(true)
			table.insert(configTable,"base="..configurationTable["base"])		
		end
		---подготовка набора загрузочных конфигурций для полей
		for _, value in pairs(configurationTable["loadConfiguration"]) do		
			local loadConfigurationTextBox = {}			
			for _, termin in pairs(value) do
				table.insert(loadConfigurationTextBox, "{"..table.concat(termin,",").."}")
			end
			if table.count(loadConfigurationTextBox) > 0 then
				table.insert(configTable,"loadConfiguration="..table.concat(loadConfigurationTextBox, ";"))	
			end
		end		
		---подготовка набора ключей поиска объектов
		for _, value in pairs(configurationTable["keySet"]) do		
			table.insert(keySetTextBox, value)
		end	
		if table.count(keySetTextBox) > 0 then
			table.insert(configTable,"keySet="..table.concat(keySetTextBox, ";"))	
		end	
		if string.len (configurationTable["terminSeparator"])> 0 then
			table.insert(configTable,"terminSeparator="..configurationTable["terminSeparator"])		
		end
		if string.len (configurationTable["skipLines"])> 0 then
			table.insert(configTable,"skipLines="..configurationTable["skipLines"])			
		end
		---подготовка набора загрузочных конфигурций для полей
		for _, termin in pairs(configurationTable["connectionConfiguration"]) do				
			table.insert(connectionConfigurationTextBox, "{"..table.concat(termin,",").."}")
		end	
		if table.count(connectionConfigurationTextBox) > 0 then
			table.insert(configTable,"connectionConfiguration="..table.concat(connectionConfigurationTextBox, ";"))	
		end
		---вывод на экран
		setTxtResultedConfigurtionText(table.concat(configTable, "\n"))	
	end
end

function txtLineNumber_KeyUp( event )
	if event.Key == Keys.Return then
		prepareTermins()
	end
end

function txtTerminSeparator_KeyUp( event )
	if event.Key == Keys.Return then
		configurationTable["terminSeparator"] = getTxtTerminSeparatorText();
		prepareTermins()
	end
end

function dpdBase_SelectedIndexChanged( control, index )
	configurationTable["base"] = string.split(getDpdBaseSelectedItem()," - ")[2]	
	doViewLogic()
	printOutConfiguration()
end

function chkDefaultValue_Click( control )	
	printOutConfiguration()
	doViewLogic()
end

function txtDefaultValue_FocusLeave( control )
	local configuration = {}	
	doViewLogic()	
	configurationTable["loadConfiguration"][tonumber(getTxtLoadConfigurationNumberText())][string.split(getDpdDataBaseSelectedItem()," - ")[2]..string.split(getDpdFieldSelectedItem()," - ")[1]] = nil
	if (string.len (getTxtDefaultValueText()) > 0) then
		table.insert(configuration,"@"..getTxtDefaultValueText())	
		table.insert(configuration, string.split(getDpdDataBaseSelectedItem()," - ")[2])
		table.insert(configuration, string.split(getDpdFieldSelectedItem()," - ")[1] )	
		if table.count(configuration) == 3 then			
			if (configurationTable["loadConfiguration"][tonumber(getTxtLoadConfigurationNumberText())] == nil) then
				configurationTable["loadConfiguration"][tonumber(getTxtLoadConfigurationNumberText())] = {}			
				
			end			
			configurationTable["loadConfiguration"][tonumber(getTxtLoadConfigurationNumberText())][string.split(getDpdDataBaseSelectedItem()," - ")[2]..string.split(getDpdFieldSelectedItem()," - ")[1]] = configuration-- configurationTermin								
		end	
	end
	printOutConfiguration()		
	setTxtDefaultValueText(nil)	
end

function doViewLogic()
	setControlEnabled(chkIsSearchKey, getLstTerminSelectedIndex() ~= nil)	
	setControlEnabled(pnlTermins ,string.len(getDpdBaseSelectedItem()) > 0)
	setControlEnabled(lstTerminNumber, not isChkDefaultValue() and string.len(getDpdBaseSelectedItem()) > 0)
	setControlEnabled(lstTermin, not isChkDefaultValue())
	setControlEnabled(chkIsSearchKey ,not isChkDefaultValue() and configurationTable["base"] == string.split(getDpdDataBaseSelectedItem()," - ")[2] and getDpdFieldSelectedItem() ~= nil)
	setControlEnabled(chkConnectionConfiguration, not isChkDefaultValue() and getDpdFieldSelectedItem() ~= nil)
	setTxtDefaultValueVisible(isChkDefaultValue())				
	setTxtDefaultValueEnabled(isChkDefaultValue() and string.len(getDpdFieldSelectedItem())>0)
	setBtnDeleteLoadConfigurationText(deleteLoadConfigurationButtonTextt..getTxtLoadConfigurationNumberText())
	setControlEnabled(btnPreviousLoadConfiguration ,tonumber(getTxtLoadConfigurationNumberText()) > 1 and configurationTable["loadConfiguration"][tonumber(getTxtLoadConfigurationNumberText())- 1] ~= nil)	
	setBtnDeleteLoadConfigurationVisible(not isChkDefaultValue())
	--setControlEnabled(btnNextLoadConfiguration ,tonumber(getTxtLoadConfigurationNumberText()) > 0 and configurationTable["loadConfiguration"][tonumber(getTxtLoadConfigurationNumberText()) + 1] ~= nil)
end

function dpdField_SelectedIndexChanged( control, index )
	doViewLogic()
	if isChkDefaultValue() and (string.len(getDpdDataBaseSelectedItem()) > 0 or string.len(getDpdFieldSelectedItem()) > 0)  then		
		local defaultValueConfiguration = configurationTable["loadConfiguration"][tonumber(getTxtLoadConfigurationNumberText())][string.split(getDpdDataBaseSelectedItem()," - ")[2]..string.split(getDpdFieldSelectedItem()," - ")[1]]		
		if (defaultValueConfiguration ~= nil) then			
			local defaultValue = defaultValueConfiguration[1]
			defaultValue = string.swap(defaultValue, "@", "")			
			setTxtDefaultValueText(defaultValue)
		end
	end	
end

function txtTerminSeparator_FocusLeave( control )	
	configurationTable["terminSeparator"] = getTxtTerminSeparatorText();
	prepareTermins()
end

function txtLineNumber_FocusLeave( control )	
	prepareTermins()	
end


function btnNextLoadConfiguration_Click( control )	
	if configurationTable["loadConfiguration"][tonumber(getTxtLoadConfigurationNumberText()) + 1] == nil then
		if MsgBox("Вы хотите создать дополнительную загрузочную конфигурацию?", IconQuestion+BtnYesNo) == IdYes then
			configurationTable["loadConfiguration"][tonumber(getTxtLoadConfigurationNumberText())+1] = {} 
			setTxtLoadConfigurationNumberText(tonumber(getTxtLoadConfigurationNumberText())+1)
			setLstTerminSelectedIndex(0)
			setLstTerminNumberSelectedIndex(0)
		end
	else
		setTxtLoadConfigurationNumberText(tonumber(getTxtLoadConfigurationNumberText())+1)
		doViewLogic()
		setLstTerminSelectedIndex(0)
		setLstTerminNumberSelectedIndex(0)
	end
end

function btnPreviousLoadConfiguration_Click( control )
	setTxtLoadConfigurationNumberText(tonumber(getTxtLoadConfigurationNumberText())-1)
	doViewLogic()
	setLstTerminSelectedIndex(0)
	setLstTerminNumberSelectedIndex(0)
end

function btnDeleteLoadConfiguration_Click( control )
	if table.count(configurationTable["loadConfiguration"]) > 1 then		
		if (tonumber(getTxtLoadConfigurationNumberText()) == table.count(configurationTable["loadConfiguration"]))then			
			configurationTable["loadConfiguration"][tonumber(getTxtLoadConfigurationNumberText())] = nil
			btnPreviousLoadConfiguration_Click( btnPreviousLoadConfiguration )
		elseif(tonumber(getTxtLoadConfigurationNumberText()) == 1) then								
			local exclude = 0
			for i=2, table.count(configurationTable["loadConfiguration"]) do				
				if i ~= tonumber(getTxtLoadConfigurationNumberText()) then
					configurationTable["loadConfiguration"][i-1-exclude] = configurationTable["loadConfiguration"][i]
				else
					exclude = exclude + 1
				end
			end
			configurationTable["loadConfiguration"][table.count(configurationTable["loadConfiguration"])] = nil			
			setTxtLoadConfigurationNumberText(1)						
		end		
	else
		configurationTable["loadConfiguration"] = {}
	end
	printOutConfiguration()		
end

function btnSaveConfiguration_Click( control )
	local filePath = string.swap(fullPath,fileName, "config.ini")	
	local result, errStr, errID = WRITEFILE(filePath, getTxtResultedConfigurtionText())
	if not result then
		MsgBox("При попытке записи фалы произошла ошибка "..errID..":"..errStr, IconError)
	else
		MsgBox("Файл конфигурации успешно записан по пути \n"..filePath, IconInformation
)
	end
end
