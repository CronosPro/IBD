--autogenerated part
local ClassManager = nil;
local Entity = nil;
local unloadController = nil;
local formsController = nil;
local requestController = nil;
local validationController = nil;
local constanta = nil;
local childForms = {}
local objectList = nil;
local isNewObject = false;

local lblLastName = nil;
local txtLastName = nil;
local lblFirstName = nil;
local txtFirstName = nil;
local lblMiddleName = nil;
local txtMiddleName = nil;
local lblBirthday = nil;
local txtBirthday = nil;
local lblGender = nil;
local dpdGender = nil;
local lblMaritalStatus = nil;
local dpdMaritalStatus = nil;
local btnSave = nil;
local btnClose = nil;
local dpdSortOfPerson = nil;
local lblSortOfPerson = nil;
local txtInfoPanel = nil;
local lblAdditionalInfo = nil;
local txtAdditionalInfo = nil;
local pnlButtons = nil;
local btnEducation = nil;
local btnPersonalID = nil;
local btnJobTrack = nil;
local btnDocument = nil;
local btnBreaches = nil;
local btnBankAccount = nil;
local lblCitizenship = nil;
local dpdCitizenship = nil;
local btnPopulateSearch = nil;
local btnPhones = nil;
local btnAddresses = nil;
local btnFounder = nil;
local btnRequests = nil;
local pnlMenu = nil;
local btnPersonRelations = nil;
local pctPhoto = nul;

function getObjectList()
    return objectList;
end
function setObjectList(objectListValue)
    objectList = objectListValue;
end

function setClassManager(ClassManagerNew)
    ClassManager = ClassManagerNew;
end
function getClassManager()
    return ClassManager;
end

function getEntity()	
    return Entity;
end
function setEntity(entityValue)
    Entity = entityValue;
end

function getIsNewObject()
    return isNewObject;
end
function setIsNewObject(isNewObjectValue)
    isNewObject = isNewObjectValue;
end

function getChildViews()
    return childViews;
end
function setChildViews(childViewsValue)
    childViews = childViewsValue;
end

function Форма_Open( form	)	
    setClassManager(Arg.ClassManager)
    setControllersReferences();	
    return true;
end

function setControllersReferences()
    unloadController = getClassManager().getClass("UnloadController");
    formsController = getClassManager().getClass("FormsController");
	requestController = getClassManager().getClass("RequestController");
	validationController = getClassManager().getClass("ValidationController");
    constanta = getClassManager().getClass("Constanta");
end

function Форма_Load( form )    	
	getClassManager().setClass(form, form)			
	setControls(form);			
    setObjectList(Arg.FormModule);
	--form.X = getObjectList().getCurrentForm().X+getObjectList().getCurrentForm().Width		
    if (Arg.Data ~= nil) then	
        for key,entity in pairs(Arg.Data) do			            											
			if (entity.getEntityBaseCode() == constanta.getCnstPerson()) then 				
				setEntity(entity);					
				form.RecordNumber = Entity.getEntityRecord().SN;	
				pnlMenu.Enabled = not form.Locked
				btnSave.Enabled = not form.Locked
				if (form.Locked) then
					setTxtInfoPanelText("Данный объект сейчас редактируется другим пользователем. Изменение невозможно");
				end				
			end
        end			
    end
	if (Entity == nil) then		
		Форма_UnloadForm( form);
	else		
		table.insert(childForms,form);		
		setFormFromEntity(getEntity());						
		detectConnectedEntitiesNumber()	
		setViewAsNewObject(Arg.viewAsNewObject);	
		setIsNewObject(Arg.isNewObject);
	end		
end

function Форма_UnloadForm( form, mode )    
	unloadController.doUnload(getClassManager(), form, childForms, true);	
    getClassManager().setClass(form, nil)	
    return true;
end

function setClassManager(ClassManagerNew)
    ClassManager = ClassManagerNew;
end
function getClassManager()
    return ClassManager;
end

function setControls(form)
    lblLastName = form.lblLastName;
    txtLastName = form.txtLastName;
    lblFirstName = form.lblFirstName;
    txtFirstName = form.txtFirstName;
    lblMiddleName = form.lblMiddleName;
    txtMiddleName = form.txtMiddleName;
    lblBirthday = form.lblBirthday;
    txtBirthday = form.txtBirthday;
    lblGender = form.lblGender;
    dpdGender = form.dpdGender;
    lblMaritalStatus = form.lblMaritalStatus;
    dpdMaritalStatus = form.dpdMaritalStatus;
    btnSave = form.btnSave;
    btnClose = form.btnClose;
    dpdSortOfPerson = form.dpdSortOfPerson;
    lblSortOfPerson = form.lblSortOfPerson;
    txtInfoPanel = form.txtInfoPanel;
    lblAdditionalInfo = form.lblAdditionalInfo;
    txtAdditionalInfo = form.txtAdditionalInfo;	
    pnlButtons = form.pnlButtons;
    btnEducation = form.btnEducation;
    btnPersonalID = form.btnPersonalID;
    btnJobTrack = form.btnJobTrack;
    btnDocument = form.btnDocument;
    btnBreaches = form.btnBreaches;
    btnBankAccount = form.btnBankAccount;
    lblCitizenship = form.lblCitizenship;
    dpdCitizenship = form.dpdCitizenship;
    btnPopulateSearch = form.btnPopulateSearch;
    btnPhones = form.btnPhones;
    btnAddresses = form.btnAddresses;
	btnFounder = form.btnFounder;
	btnRequests = form.btnRequests;
    pnlMenu = form.pnlMenu;
    btnPersonRelations = form.btnPersonRelations;
	pctPhoto = form.pctPhoto;
    populateLists();
	setTxtInfoPanelBackColor(constanta.getSystemBackColor());
end


function populateLists()

end

function setFormFromEntity(entity)
    setTxtLastNameText(entity.getLastName());
    setTxtFirstNameText(entity.getFirstName());
    setTxtMiddleNameText(entity.getMiddleName());
    setTxtBirthdayText(entity.getBirthday());
    setDpdGenderSelectedItem(entity.getGender());
    setDpdMaritalStatusSelectedItem(entity.getMaritalStatus());
    setDpdSortOfPersonSelectedCodes(entity.getSortOfPerson());
    setTxtAdditionalInfoText(entity.getAdditionalInfo());	
    setDpdCitizenshipSelectedItem(entity.getCitizenship());
end
function setLblLastNameText( lblLastNameValue )
   lblLastName.Value = lblLastNameValue
end
function getLblLastNameText( )
    return lblLastName.Value
end

function getTxtLastNameText( )
    return txtLastName.Value
end
function setTxtLastNameText( txtLastNameValue )
    txtLastName.Value = txtLastNameValue
end
function setTxtLastNameEnabled( isTxtLastNameEnabled )
   txtLastName.Enabled = isTxtLastNameEnabled
end

function setLblFirstNameText( lblFirstNameValue )
   lblFirstName.Value = lblFirstNameValue
end
function getLblFirstNameText( )
    return lblFirstName.Value
end

function getTxtFirstNameText( )
    return txtFirstName.Value
end
function setTxtFirstNameText( txtFirstNameValue )
    txtFirstName.Value = txtFirstNameValue
end
function setTxtFirstNameEnabled( isTxtFirstNameEnabled )
   txtFirstName.Enabled = isTxtFirstNameEnabled
end

function setLblMiddleNameText( lblMiddleNameValue )
   lblMiddleName.Value = lblMiddleNameValue
end
function getLblMiddleNameText( )
    return lblMiddleName.Value
end

function getTxtMiddleNameText( )
    return txtMiddleName.Value
end
function setTxtMiddleNameText( txtMiddleNameValue )
    txtMiddleName.Value = txtMiddleNameValue
end
function setTxtMiddleNameEnabled( isTxtMiddleNameEnabled )
   txtMiddleName.Enabled = isTxtMiddleNameEnabled
end

function setLblBirthdayText( lblBirthdayValue )
   lblBirthday.Value = lblBirthdayValue
end
function getLblBirthdayText( )
    return lblBirthday.Value
end

function getTxtBirthdayText( )
    return txtBirthday.Value
end
function setTxtBirthdayText( txtBirthdayValue )
    if (txtBirthdayValue ~= nil) then
		if (string.len(string.trim(txtBirthdayValue)) > 0) then
			txtBirthday.Value = txtBirthdayValue
		end
	end
end
function setTxtBirthdayEnabled( isTxtBirthdayEnabled )
   txtBirthday.Enabled = isTxtBirthdayEnabled
end

function setLblGenderText( lblGenderValue )
   lblGender.Value = lblGenderValue
end
function getLblGenderText( )
    return lblGender.Value
end

function addDpdGenderItem( dpdGenderValue )
   dpdGender:Add(dpdGenderValue)
end
function addDpdGenderItems( dpdGenderValues )
    if dpdGenderValues ~= nil then
        for key, value in pairs (dpdGenderValues) do
            addDpdGenderItem(value)
        end
    end
end
function clearDpdGenderItesm( )
   dpdGender:Clear(index)
end
function getDpdGenderSelectedItem( )
    return dpdGender.Text
end
function setDpdGenderSelectedItem( dpdGenderItemValue)
    dpdGender.Value = dpdGenderItemValue
end
function getDpdGenderSelectedIndex( )
    return dpdGender.SelectedIndex
end
function getDpdGenderSelectedCode( )
    return dpdGender.Value
end
function setDpdGenderSelectedIndex( dpdGenderIndexValue )
    dpdGender.SelectedIndex = dpdGenderIndexValue
end
function setDpdGenderEnabled( isDpdGenderEnabled )
   dpdGender.Enabled = isDpdGenderEnabled
end

function setLblMaritalStatusText( lblMaritalStatusValue )
   lblMaritalStatus.Value = lblMaritalStatusValue
end
function getLblMaritalStatusText( )
    return lblMaritalStatus.Value
end

function addDpdMaritalStatusItem( dpdMaritalStatusValue )
   dpdMaritalStatus:Add(dpdMaritalStatusValue)
end
function addDpdMaritalStatusItems( dpdMaritalStatusValues )
    if dpdMaritalStatusValues ~= nil then
        for key, value in pairs (dpdMaritalStatusValues) do
            addDpdMaritalStatusItem(value)
        end
    end
end
function clearDpdMaritalStatusItesm( )
   dpdMaritalStatus:Clear(index)
end
function getDpdMaritalStatusSelectedItem( )
    return dpdMaritalStatus.Text
end
function setDpdMaritalStatusSelectedItem( dpdMaritalStatusItemValue)
    dpdMaritalStatus.Value = dpdMaritalStatusItemValue
end
function getDpdMaritalStatusSelectedIndex( )
    return dpdMaritalStatus.SelectedIndex
end
function getDpdMaritalStatusSelectedCode( )
    return dpdMaritalStatus.Value
end
function setDpdMaritalStatusSelectedIndex( dpdMaritalStatusIndexValue )
    dpdMaritalStatus.SelectedIndex = dpdMaritalStatusIndexValue
end
function setDpdMaritalStatusEnabled( isDpdMaritalStatusEnabled )
   dpdMaritalStatus.Enabled = isDpdMaritalStatusEnabled
end

function setBtnSaveText( btnSaveValue )
   btnSave.Text = btnSaveValue
end
function getBtnSaveText( )
    return btnSave.Text
end
function setBtnSaveEnabled( isBtnSaveEnabled )
   btnSave.Enabled = isBtnSaveEnabled
end

function btnSave_Click( control, isInternal )
    setIsNewObject(false);
	getEntity().setBeanFromView(btnSave.Form.Module);
    if (Entity.saveBeanToDb()  == true) then	
		getObjectList().refreshForm(getEntity());		
        setTxtInfoPanelText("Запись успешно сохранена в базу данных");		
		if (not isInternal) then
			Форма_UnloadForm( btnSave.Form);		
		end
    else
        setTxtInfoPanelText("ВНИМАНИЕ!!! Запись не сохранена в базу данных");
    end
end

function setBtnCloseText( btnCloseValue )
   btnClose.Text = btnCloseValue
end
function getBtnCloseText( )
    return btnClose.Text
end
function setBtnCloseEnabled( isBtnCloseEnabled )
   btnClose.Enabled = isBtnCloseEnabled
end

function btnClose_Click( control )
    setFormFromEntity(Entity);
    Форма_UnloadForm( control.Form);
end

function addDpdSortOfPersonItem( dpdSortOfPersonValue )
   dpdSortOfPerson:Add(dpdSortOfPersonValue)
end
function addDpdSortOfPersonItems( dpdSortOfPersonValues )
    if dpdSortOfPersonValues ~= nil then
        for key, value in pairs (dpdSortOfPersonValues) do
            addDpdSortOfPersonItem(value)
        end
    end
end
function clearDpdSortOfPersonItesm( )
   dpdSortOfPerson:Clear(index)
end
function getDpdSortOfPersonSelectedItem( )
    return dpdSortOfPerson.Text
end
function setDpdSortOfPersonSelectedItem( dpdSortOfPersonItemValue)
    dpdSortOfPerson.Value = dpdSortOfPersonItemValue
end
function getDpdSortOfPersonSelectedIndex( )
    return dpdSortOfPerson.SelectedIndex
end
function getDpdSortOfPersonSelectedCode( )
    local sortOfPerson = {}	
	for i=1,dpdSortOfPerson.ValuesCount do		
		table.insert(sortOfPerson,dpdSortOfPerson:GetValue(i))
	end
    return sortOfPerson
end
function setDpdSortOfPersonSelectedCodes( dpdSortOfPersonValues )   
	for key, descr in pairs(dpdSortOfPersonValues) do
		dpdSortOfPerson:SetValue(descr, key)		
	end	
end
function setDpdSortOfPersonSelectedIndex( dpdSortOfPersonIndexValue )
    dpdSortOfPerson.SelectedIndex = dpdSortOfPersonIndexValue
end
function setDpdSortOfPersonEnabled( isDpdSortOfPersonEnabled )
   dpdSortOfPerson.Enabled = isDpdSortOfPersonEnabled
end

function setLblSortOfPersonText( lblSortOfPersonValue )
   lblSortOfPerson.Value = lblSortOfPersonValue
end
function getLblSortOfPersonText( )
    return lblSortOfPerson.Value
end

function setTxtInfoPanelText( txtInfoPanelText )
    txtInfoPanel.Text = txtInfoPanelText
end
function setTxtInfoPanelText( txtInfoPanelText )
    txtInfoPanel.Text = txtInfoPanelText
end
function setTxtInfoPanelEnabled( isTxtInfoPanelEnabled )
   txtInfoPanel.Enabled = isTxtInfoPanelEnabled
end
function setTxtInfoPanelBackColor( txtInfoPanelBackColor )
   txtInfoPanel.BackColor = txtInfoPanelBackColor
end
function setTxtInfoPanelBackColor( txtInfoPanelBackColor )
   txtInfoPanel.BackColor = txtInfoPanelBackColor
end


function setLblAdditionalInfoText( lblAdditionalInfoValue )
   lblAdditionalInfo.Value = lblAdditionalInfoValue
end
function getLblAdditionalInfoText( )
    return lblAdditionalInfo.Value
end

function getTxtAdditionalInfoText( )
    local addInfo = {}	
	for i=1,txtAdditionalInfo.ValuesCount do		
		table.insert(addInfo,txtAdditionalInfo:GetValue(i))
	end
    return addInfo
end
function setTxtAdditionalInfoText( txtAdditionalInfoValue )   
	for key, descr in pairs(txtAdditionalInfoValue) do
		txtAdditionalInfo:SetValue(descr, key)		
	end	
end
function setTxtAdditionalInfoEnabled( isTxtAdditionalInfoEnabled )
   txtAdditionalInfo.Enabled = isTxtAdditionalInfoEnabled
end

function setTxtSortOfPersonEnabled( isTxtSortOfPersonEnable )
   txtSortOfPerson.Enabled = isTxtSortOfPersonEnable
end

function setPnlButtonsText( pnlButtonsValue )
   pnlButtons.Text = pnlButtonsValue
end
function getPnlButtonsText( )
    return pnlButtons.Text
end
function setPnlButtonsEnabled( isPnlButtonsEnabled )
   pnlButtons.Enabled = isPnlButtonsEnabled
end

function setBtnEducationText( btnEducationValue )
   btnEducation.Text = btnEducationValue
end
function getBtnEducationText( )
    return btnEducation.Text
end
function setBtnEducationEnabled( isBtnEducationEnabled )
   btnEducation.Enabled = isBtnEducationEnabled
end

function setBtnPersonalIDText( btnPersonalIDValue )
   btnPersonalID.Text = btnPersonalIDValue
end
function getBtnPersonalIDText( )
    return btnPersonalID.Text
end
function setBtnPersonalIDEnabled( isBtnPersonalIDEnabled )
   btnPersonalID.Enabled = isBtnPersonalIDEnabled
end

function setBtnJobTrackText( btnJobTrackValue )
   btnJobTrack.Text = btnJobTrackValue
end
function getBtnJobTrackText( )
    return btnJobTrack.Text
end
function setBtnJobTrackEnabled( isBtnJobTrackEnabled )
   btnJobTrack.Enabled = isBtnJobTrackEnabled
end

function setBtnDocumentsText( btnDocumentsValue )
   btnDocuments.Text = btnDocumentsValue
end
function getBtnDocumentsText( )
    return btnDocuments.Text
end
function setBtnDocumentsEnabled( isBtnDocumentsEnabled )
   btnDocuments.Enabled = isBtnDocumentsEnabled
end

function setBtnBreachesText( btnBreachesValue )
   btnBreaches.Text = btnBreachesValue
end
function getBtnBreachesText( )
    return btnBreaches.Text
end
function setBtnBreachesEnabled( isBtnBreachesEnabled )
   btnBreaches.Enabled = isBtnBreachesEnabled
end

function setBtnBankAccountText( btnBankAccountValue )
   btnBankAccount.Text = btnBankAccountValue
end
function getBtnBankAccountText( )
    return btnBankAccount.Text
end
function setBtnBankAccountEnabled( isBtnBankAccountEnabled )
   btnBankAccount.Enabled = isBtnBankAccountEnabled
end

function setLblCitizenshipText( lblCitizenshipValue )
   lblCitizenship.Value = lblCitizenshipValue
end
function getLblCitizenshipText( )
    return lblCitizenship.Value
end

function addDpdCitizenshipItem( dpdCitizenshipValue )
   dpdCitizenship:Add(dpdCitizenshipValue)
end
function addDpdCitizenshipItems( dpdCitizenshipValues )
    if dpdCitizenshipValues ~= nil then
        for key, value in pairs (dpdCitizenshipValues) do
            addDpdCitizenshipItem(value)
        end
    end
end
function clearDpdCitizenshipItesm( )
   dpdCitizenship:Clear(index)
end
function getDpdCitizenshipSelectedItem( )
    return dpdCitizenship.Text
end
function setDpdCitizenshipSelectedItem( dpdCitizenshipItemValue)
    dpdCitizenship.Value = dpdCitizenshipItemValue
end
function getDpdCitizenshipSelectedIndex( )
    return dpdCitizenship.SelectedIndex
end
function getDpdCitizenshipSelectedCode( )
    return dpdCitizenship.Value
end
function setDpdCitizenshipSelectedIndex( dpdCitizenshipIndexValue )
    dpdCitizenship.SelectedIndex = dpdCitizenshipIndexValue
end
function setDpdCitizenshipEnabled( isDpdCitizenshipEnabled )
   dpdCitizenship.Enabled = isDpdCitizenshipEnabled
end

function setBtnPopulateSearchText( btnPopulateSearchValue )
   btnPopulateSearch.Text = btnPopulateSearchValue
end
function getBtnPopulateSearchText( )
    return btnPopulateSearch.Text
end
function setBtnPopulateSearchEnabled( isBtnPopulateSearchEnabled )
   btnPopulateSearch.Enabled = isBtnPopulateSearchEnabled
end

function setBtnPhonesText( btnPhonesValue )
   btnPhones.Text = btnPhonesValue
end
function getBtnPhonesText( )
    return btnPhones.Text
end
function setBtnPhonesEnabled( isBtnPhonesEnabled )
   btnPhones.Enabled = isBtnPhonesEnabled
end

function setBtnPersonRelationsText( btnPersonRelationsValue )
   btnPersonRelations.Text = btnPersonRelationsValue
end
function getBtnPersonRelationsText( )
    return btnPersonRelations.Text
end
function setBtnPersonRelationsEnabled( isBtnPersonRelationsEnabled )
   btnPersonRelations.Enabled = isBtnPersonRelationsEnabled
end

function setBtnAddressesText( btnAddressesValue )
   btnAddresses.Text = btnAddressesValue
end
function getBtnAddressesText( )
    return btnAddresses.Text
end
function setBtnAddressesEnabled( isBtnAddressesEnabled )
   btnAddresses.Enabled = isBtnAddressesEnabled
end

function setBtnDocumentText( btnDocumentValue )
   btnDocument.Text = btnDocumentValue
end
function getBtnDocumentText( )
    return btnDocument.Text
end
function setBtnDocumentEnabled( isBtnDocumentEnabled )
   btnDocument.Enabled = isBtnDocumentEnabled
end

function setBtnFounderText( btnFounderValue )
   btnFounder.Text = btnFounderValue
end
function getBtnFounderText( )
    return btnFounder.Text
end
function setBtnFounderEnabled( isBtnFounderEnabled )
   btnFounder.Enabled = isBtnFounderEnabled
end

function setBtnRequestsText( btnRequestsValue )
   btnRequests.Text = btnRequestsValue
end
function getBtnRequestsText( )
    return btnRequests.Text
end
function setBtnRequestsEnabled( isBtnRequestsEnabled )
   btnRequests.Enabled = isBtnRequestsEnabled
end
--end autogenerated part
----------------------------------------------------------------------------
----------------------------------------------------------------------------
function setPnlButtonsVisibility( pnlButtonsVisibilityValue )
   pnlButtons.Visible = pnlButtonsVisibilityValue
end
function getPnlButtons( )
    return pnlButtons
end

function setBtnPopulateSearchText( btnPopulateSearchValue )
   btnPopulateSearch.Text = btnPopulateSearchValue
end
function setBtnPopulateSearchVisibility( btnPopulateSearchVisible )
   btnPopulateSearch.Visible = btnPopulateSearchVisible
end
function getBtnPopulateSearchText( )
    return btnPopulateSearch.Text
end

function setPnlMenuText( pnlMenuValue )
   pnlMenu.Text = pnlMenuValue
end
function getPnlMenuText( )
    return pnlMenu.Text
end
function setPnlMenuEnabled( isPnlMenuEnabled )
   pnlMenu.Enabled = isPnlMenuEnabled
end

function setViewAsNewObject(isNew)	
	setBtnPopulateSearchVisibility(isNew);		
	setDpdGenderEnabled(not isNew);		
	setDpdMaritalStatusEnabled(not isNew);		
	setDpdSortOfPersonEnabled(not isNew);		
	setTxtAdditionalInfoEnabled(not isNew);	
	setDpdCitizenshipEnabled(not isNew);
	setBtnSaveEnabled(not isNew);
	setPnlMenuEnabled(not isNew);
	setIsNewObject(isNew);
end

function setPnlButtonsVisibility( pnlButtonsVisibilityValue )
   pnlButtons.Visible = pnlButtonsVisibilityValue
end
function getPnlButtons( )
    return pnlButtons
end

function setPnlMenuText( pnlMenuValue )
   pnlMenu.Text = pnlMenuValue
end
function getPnlMenuText( )
    return pnlMenu.Text
end
function setPnlMenuEnabled( isPnlMenuEnabled )
   pnlMenu.Enabled = isPnlMenuEnabled
end

function btnBirthday_Click( control )
	table.insert(childForms,formsController.openNeccessaryForm(getClassManager(),control,nil))
end

function dpdGender_SelectedIndexChanged( control, index )
	dpdGender.ToolTip = getDpdGenderSelectedItem();
end

function dpdSortOfPerson_SelectedIndexChanged( control, index )
	dpdSortOfPerson.ToolTip = getDpdSortOfPersonSelectedItem();
end

function txtFirstName_FocusLeave( control )	
	txtFirstName.Value = string.ulower(txtFirstName.Text)
end

function txtLastName_FocusLeave( control )
	txtLastName.Value = string.ulower(txtLastName.Text)	
end

function txtMiddleName_FocusLeave( control )
	txtMiddleName.Value = string.ulower(txtMiddleName.Text)
end
--------------------------------------------
function getPctPhoto( )	
    return pctPhoto;
end
function getPctOrgLogoValue( )	
    return pctPhoto.Value
end
function setPctPhotoValue( pctPhotoValue )
    pctPhoto.Value = pctOrgLogoValue	
end
function setPctPhotoEnabled( isPctPhotoEnabled )
   pctPhoto.Enabled = isPctOrgLogoEnabled
end

function btnAddresses_Click( control )		
	doIsNecessaryToSave()	
	local addressTypeRecordSet = getClassManager().getClass("DBWorker").getItemsForPerson(getClassManager(), 
																						getClassManager().getClass("Constanta").getCnstAddressType(),
																						Entity.getEntityRecord());	
	table.insert(childForms,formsController.openNeccessaryForm(getClassManager(), control, addressTypeRecordSet, Entity));
end

function btnPhones_Click( control )
	doIsNecessaryToSave()	
	local connectionTypeRecordSet = getClassManager().getClass("DBWorker").getItemsForPerson(getClassManager(), 
																							getClassManager().getClass("Constanta").getCnstConnectionType(), 
																							Entity.getEntityRecord());	
	table.insert(childForms,formsController.openNeccessaryForm(getClassManager(), control, connectionTypeRecordSet, Entity));	
end

function btnBankAccount_Click( control )
	doIsNecessaryToSave()	
	local bankAccountRecordSet = getClassManager().getClass("DBWorker").getItemsForPerson(getClassManager(), 
																							getClassManager().getClass("Constanta").getCnstBankAccount(), 
																							Entity.getEntityRecord());	
	table.insert(childForms,formsController.openNeccessaryForm(getClassManager(), control, bankAccountRecordSet, Entity));	
end

function btnEducation_Click( control )	
	doIsNecessaryToSave()	
	local educationRecordSet = getClassManager().getClass("DBWorker").getItemsForPerson(getClassManager(), 
																						getClassManager().getClass("Constanta").getCnstEducation(), 
																						Entity.getEntityRecord());	
	table.insert(childForms,formsController.openNeccessaryForm(getClassManager(), control, educationRecordSet, Entity));			
end

function btnPersonalID_Click( control )
	doIsNecessaryToSave()	
	local personalIDRecordSet = getClassManager().getClass("DBWorker").getItemsForPerson(getClassManager(), 
																						getClassManager().getClass("Constanta").getCnstPersonalID(), 
																						Entity.getEntityRecord());	
	table.insert(childForms,formsController.openNeccessaryForm(getClassManager(), control, personalIDRecordSet, Entity));	
end

function btnDocument_Click( control )
	doIsNecessaryToSave()	
	local documentRecordSet = getClassManager().getClass("DBWorker").getItemsForPerson(getClassManager(), 
																						getClassManager().getClass("Constanta").getCnstDocument(), 
																						Entity.getEntityRecord());	
	table.insert(childForms,formsController.openNeccessaryForm(getClassManager(), control, documentRecordSet, Entity));		
end

function btnBreaches_Click( control )	
	doIsNecessaryToSave()	
	local breachesRecordSet = getClassManager().getClass("DBWorker").getItemsForPerson(getClassManager(), 
																						getClassManager().getClass("Constanta").getCnstBreaches(), 
																						Entity.getEntityRecord());	
	table.insert(childForms,formsController.openNeccessaryForm(getClassManager(), control, breachesRecordSet, Entity));
end

function btnJobTrack_Click( control )
	doIsNecessaryToSave()	
	local jobTrackRecordSet = getClassManager().getClass("DBWorker").getItemsForPerson(getClassManager(), 
																						getClassManager().getClass("Constanta").getCnstJobTrack(), 
																						Entity.getEntityRecord());	
	table.insert(childForms,formsController.openNeccessaryForm(getClassManager(), control, jobTrackRecordSet, Entity));		
end


function btnPersonRelations_Click( control )
	doIsNecessaryToSave()	
	local personRelationsRecordSet = getClassManager().getClass("DBWorker").getItemsForPerson(getClassManager(), 
																						getClassManager().getClass("Constanta").getCnstPersonRelations(), 
																						Entity.getEntityRecord());	
	table.insert(childForms,formsController.openNeccessaryForm(getClassManager(), control, personRelationsRecordSet, Entity));	
end

function btnFounder_Click( control )
	doIsNecessaryToSave()	
	local founderRecordSet = getClassManager().getClass("DBWorker").getItemsForPerson(getClassManager(), 
																						getClassManager().getClass("Constanta").getCnstFoundersAndPartners(), 
																						Entity.getEntityRecord());		
	table.insert(childForms,formsController.openNeccessaryForm(getClassManager(), control, founderRecordSet, Entity));	
end

function btnRequests_Click( control )
	doIsNecessaryToSave()		
	local requestsResordSet = getClassManager().getClass("DBWorker").getItemsForPerson(getClassManager(), 
																							getClassManager().getClass("Constanta").getCnstRequestJournal(), 
																							Entity.getEntityRecord());																								
	table.insert(childForms,formsController.openNeccessaryForm(getClassManager(), control, requestsResordSet, Entity));	
end

--метод определения и вывода на текст кнопок количества связанных объектов
function detectConnectedEntitiesNumber()		
	local connectionTypeRecordSet = getClassManager().getClass("DBWorker").getItemsForPerson(getClassManager(), 
																							getClassManager().getClass("Constanta").getCnstConnectionType(), 
																							Entity.getEntityRecord());	
	setBtnPhonesText(string.gsub(getBtnPhonesText()," %(%d+%)","").." ("..connectionTypeRecordSet.Count..")")	
	local addressTypeRecordSet = getClassManager().getClass("DBWorker").getItemsForPerson(getClassManager(), 
																							getClassManager().getClass("Constanta").getCnstAddressType(),
																							Entity.getEntityRecord());	
	setBtnAddressesText(string.gsub(getBtnAddressesText()," %(%d+%)","").." ("..addressTypeRecordSet.Count..")")
	local bankAccountRecordSet = getClassManager().getClass("DBWorker").getItemsForPerson(getClassManager(), 
																						getClassManager().getClass("Constanta").getCnstBankAccount(), 
																						Entity.getEntityRecord());	
	setBtnBankAccountText(string.gsub(getBtnBankAccountText()," %(%d+%)","").." ("..bankAccountRecordSet.Count..")")		
	local documentRecordSet = getClassManager().getClass("DBWorker").getItemsForPerson(getClassManager(), 
																						getClassManager().getClass("Constanta").getCnstDocument(), 
																						Entity.getEntityRecord());	
	setBtnDocumentText(string.gsub(getBtnDocumentText()," %(%d+%)","").." ("..documentRecordSet.Count..")")		
	local educationRecordSet = getClassManager().getClass("DBWorker").getItemsForPerson(getClassManager(), 
																						getClassManager().getClass("Constanta").getCnstEducation(), 
																						Entity.getEntityRecord());	
	setBtnEducationText(string.gsub(getBtnEducationText()," %(%d+%)","").." ("..educationRecordSet.Count..")")		
	local personalIDRecordSet = getClassManager().getClass("DBWorker").getItemsForPerson(getClassManager(), 
																							getClassManager().getClass("Constanta").getCnstPersonalID(), 
																							Entity.getEntityRecord());	
	setBtnPersonalIDText(string.gsub(getBtnPersonalIDText()," %(%d+%)","").." ("..personalIDRecordSet.Count..")")		
	local breachesRecordSet = getClassManager().getClass("DBWorker").getItemsForPerson(getClassManager(), 
																						getClassManager().getClass("Constanta").getCnstBreaches(), 
																						Entity.getEntityRecord());	
	setBtnBreachesText(string.gsub(getBtnBreachesText()," %(%d+%)","").." ("..breachesRecordSet.Count..")")		
	local jobTrackRecordSet = getClassManager().getClass("DBWorker").getItemsForPerson(getClassManager(), 
																						getClassManager().getClass("Constanta").getCnstJobTrack(), 
																						Entity.getEntityRecord());	
	
	setBtnJobTrackText(string.gsub(getBtnJobTrackText()," %(%d+%)","").." ("..jobTrackRecordSet.Count..")")	
	local personRelationsRecordSet = getClassManager().getClass("DBWorker").getItemsForPerson(getClassManager(), 
																						getClassManager().getClass("Constanta").getCnstPersonRelations(), 
																						Entity.getEntityRecord());	
	setBtnPersonRelationsText(string.gsub(getBtnPersonRelationsText()," %(%d+%)","").." ("..personRelationsRecordSet.Count..")")	
	local founderRecordSet = getClassManager().getClass("DBWorker").getItemsForPerson(getClassManager(), 
																						getClassManager().getClass("Constanta").getCnstFoundersAndPartners(), 
																						Entity.getEntityRecord());	
	setBtnFounderText(string.gsub(getBtnFounderText()," %(%d+%)","").." ("..founderRecordSet.Count..")")		
	local requestsResordSet = getClassManager().getClass("DBWorker").getItemsForPerson(getClassManager(), 
																							getClassManager().getClass("Constanta").getCnstRequestJournal(), 
																							Entity.getEntityRecord());																										
	setBtnRequestsText(string.gsub(getBtnRequestsText()," %(%d+%)","").." ("..requestsResordSet.Count..")")					
end


function btnPopulateSearch_Click( control )
	local personRec = nil;
	if validationController.doValidate(getClassManager(), control) then
		local personRecSet = requestController.populateSearch(getClassManager(), control);		
		if (personRecSet.Count > 0) then
			--[[if (personRecSet.Count == 1) then	
				personRec = personRecSet:GetRecordByIndex(1);	
				setChosenRecord(control.Form, personRec);	
			else--]]				
				MsgBox("Найдены существующие объекты в количестве "..personRecSet.Count .." штук.",BtnOk + IconInformation)	
				table.insert(childForms,formsController.openNeccessaryForm(getClassManager(), control, personRecSet, Entity));	
			--end
		else
			setChosenRecord(control.Form, personRec);	
			setIsNewObject(true);	
			setBtnPopulateSearchVisibility(true);
		end
	end
end

function setChosenRecord(form, personRec)
	if (personRec ~= nil) then													
		local lastEntity = getEntity();			
		local personEntity = getClassManager().newEntity(getClassManager(),getClassManager().getClass("Constanta").getCnstPerson());								
		personEntity.setBeanFromRecord(personRec);											
		form:DeleteLink();				
		form:RemoveRecord(personRec.SN);			
		if (getObjectList().getMainObject().getEntityBaseCode() == constanta.getCnstPersonRelations()) then
		--(getObjectList().getCurrentFormNameInList() == "PersonRelationsView") then				
			lastEntity.deleteLinkPersonRelations(getObjectList().getEntity());		
			getObjectList().getEntity().addPersonEntity(personEntity);									
			getObjectList().getEntity().setLinks();									
		elseif (getObjectList().getMainObject().getEntityBaseCode() == constanta.getCnstDocument()) then															
			lastEntity.deleteLinkDocument(getObjectList().getMainObject());														
			getObjectList().getMainObject().deleteLinkPerson(lastEntity);				
			getObjectList().getMainObject().setPersonEntities({});
			getObjectList().getMainObject().addPersonEntity(personEntity);																					
			getObjectList().getMainObject().setLinks();								
		end
		getClassManager().getClass("DBWorker").unlockRecord(ClassManager, lastEntity.getEntityRecord())
		CroApp.GetBank():GetBase(getClassManager().getClass("Constanta").getCnstPerson()):DeleteRecord(lastEntity.getEntityRecord().SN)										
		Arg.Data = {personEntity};							
		Форма_Load( form )  					
	end
	getObjectList().getMainFormModule().btnSave_Click(nil, true);			
	getObjectList().getMainFormModule().detectConnectedEntitiesNumber();	
	setViewAsNewObject(false);		
	dpdGender.Focused = true;	
	if (personRec == nil) then
		setIsNewObject(true);
	end
end

function doIsNecessaryToSave()	
	if (getIsNewObject()) then		
		setIsNewObject(false);
		btnSave_Click(btnSave, true);	
		btnSave.Form:ReloadRecord();
		btnSave.Form:Refresh();	
	end
end

function Форма_BeforeSaveForm( event )
	--event.PermitSave = false;
end

function pctPhoto_DataChanged( control, data )
	local filePath = "";
	if (string.match(data, ".exe") == nil) then
		if (string.len(data) > 0) then
			filePath = CroApp.TempDir..data;												
		end		
	else		
		MsgBox("Файлы типа EXE запрещено сохранять в базу данных.\n\rФайл будет удален.", IconError)		
	end	
	getEntity().setPhotoPicture(filePath)	
	return true;
end

function btnFullReport_Click( control )	
	table.insert(childForms,formsController.openNeccessaryForm(getClassManager(), control, nil, nil, getEntity()));	
end